{"ast":null,"code":"'use strict'; // TODO: Use the `URL` global when targeting Node.js 10\n\nconst URLParser = typeof URL === 'undefined' ? require('url').URL : URL; // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => {\n  return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n};\n\nconst normalizeDataURL = (urlString, {\n  stripHash\n}) => {\n  const parts = urlString.match(/^data:([^,]*?),([^#]*?)(?:#(.*))?$/);\n\n  if (!parts) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n\n  const mediaType = parts[1].split(';');\n  const body = parts[2];\n  const hash = stripHash ? '' : parts[3];\n  let base64 = false;\n\n  if (mediaType[mediaType.length - 1] === 'base64') {\n    mediaType.pop();\n    base64 = true;\n  } // Lowercase MIME type\n\n\n  const mimeType = (mediaType.shift() || '').toLowerCase();\n  const attributes = mediaType.map(attribute => {\n    let [key, value = ''] = attribute.split('=').map(string => string.trim()); // Lowercase `charset`\n\n    if (key === 'charset') {\n      value = value.toLowerCase();\n\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return '';\n      }\n    }\n\n    return `${key}${value ? `=${value}` : ''}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n\n  if (base64) {\n    normalizedMediaType.push('base64');\n  }\n\n  if (normalizedMediaType.length !== 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n\n  return `data:${normalizedMediaType.join(';')},${base64 ? body.trim() : body}${hash ? `#${hash}` : ''}`;\n};\n\nconst normalizeUrl = (urlString, options) => {\n  options = {\n    defaultProtocol: 'http:',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeDirectoryIndex: false,\n    sortQueryParameters: true,\n    ...options\n  }; // TODO: Remove this at some point in the future\n\n  if (Reflect.has(options, 'normalizeHttps')) {\n    throw new Error('options.normalizeHttps is renamed to options.forceHttp');\n  }\n\n  if (Reflect.has(options, 'normalizeHttp')) {\n    throw new Error('options.normalizeHttp is renamed to options.forceHttps');\n  }\n\n  if (Reflect.has(options, 'stripFragment')) {\n    throw new Error('options.stripFragment is renamed to options.stripHash');\n  }\n\n  urlString = urlString.trim(); // Data URL\n\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n\n  const hasRelativeProtocol = urlString.startsWith('//');\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString); // Prepend protocol\n\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n\n  const urlObj = new URLParser(urlString);\n\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n\n  if (options.forceHttp && urlObj.protocol === 'https:') {\n    urlObj.protocol = 'http:';\n  }\n\n  if (options.forceHttps && urlObj.protocol === 'http:') {\n    urlObj.protocol = 'https:';\n  } // Remove auth\n\n\n  if (options.stripAuthentication) {\n    urlObj.username = '';\n    urlObj.password = '';\n  } // Remove hash\n\n\n  if (options.stripHash) {\n    urlObj.hash = '';\n  } // Remove duplicate slashes if not preceded by a protocol\n\n\n  if (urlObj.pathname) {\n    // TODO: Use the following instead when targeting Node.js 10\n    // `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n    urlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\\/{2,}/g, (_, p1) => {\n      if (/^(?!\\/)/g.test(p1)) {\n        return `${p1}/`;\n      }\n\n      return '/';\n    });\n  } // Decode URI octets\n\n\n  if (urlObj.pathname) {\n    urlObj.pathname = decodeURI(urlObj.pathname);\n  } // Remove directory index\n\n\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObj.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, pathComponents.length - 1);\n      urlObj.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n\n  if (urlObj.hostname) {\n    // Remove trailing dot\n    urlObj.hostname = urlObj.hostname.replace(/\\.$/, ''); // Remove `www.`\n\n    if (options.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z.]{2,5})$/.test(urlObj.hostname)) {\n      // Each label should be max 63 at length (min: 2).\n      // The extension should be max 5 at length (min: 2).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      urlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n    }\n  } // Remove query unwanted parameters\n\n\n  if (Array.isArray(options.removeQueryParameters)) {\n    for (const key of [...urlObj.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObj.searchParams.delete(key);\n      }\n    }\n  } // Sort query parameters\n\n\n  if (options.sortQueryParameters) {\n    urlObj.searchParams.sort();\n  }\n\n  if (options.removeTrailingSlash) {\n    urlObj.pathname = urlObj.pathname.replace(/\\/$/, '');\n  } // Take advantage of many of the Node `url` normalizations\n\n\n  urlString = urlObj.toString(); // Remove ending `/`\n\n  if ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '') {\n    urlString = urlString.replace(/\\/$/, '');\n  } // Restore relative protocol, if applicable\n\n\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  } // Remove http/https\n\n\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n  }\n\n  return urlString;\n};\n\nmodule.exports = normalizeUrl; // TODO: Remove this for the next major release\n\nmodule.exports.default = normalizeUrl;","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/cacheable-request/node_modules/normalize-url/index.js"],"names":["URLParser","URL","require","DATA_URL_DEFAULT_MIME_TYPE","DATA_URL_DEFAULT_CHARSET","testParameter","name","filters","some","filter","RegExp","test","normalizeDataURL","urlString","stripHash","parts","match","Error","mediaType","split","body","hash","base64","length","pop","mimeType","shift","toLowerCase","attributes","map","attribute","key","value","string","trim","Boolean","normalizedMediaType","push","unshift","join","normalizeUrl","options","defaultProtocol","normalizeProtocol","forceHttp","forceHttps","stripAuthentication","stripWWW","removeQueryParameters","removeTrailingSlash","removeDirectoryIndex","sortQueryParameters","Reflect","has","hasRelativeProtocol","startsWith","isRelativeUrl","replace","urlObj","protocol","username","password","pathname","_","p1","decodeURI","Array","isArray","pathComponents","lastComponent","slice","hostname","searchParams","keys","delete","sort","toString","stripProtocol","module","exports","default"],"mappings":"AAAA,a,CACA;;AACA,MAAMA,SAAS,GAAG,OAAOC,GAAP,KAAe,WAAf,GAA6BC,OAAO,CAAC,KAAD,CAAP,CAAeD,GAA5C,GAAkDA,GAApE,C,CAEA;;AACA,MAAME,0BAA0B,GAAG,YAAnC;AACA,MAAMC,wBAAwB,GAAG,UAAjC;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACxC,SAAOA,OAAO,CAACC,IAAR,CAAaC,MAAM,IAAIA,MAAM,YAAYC,MAAlB,GAA2BD,MAAM,CAACE,IAAP,CAAYL,IAAZ,CAA3B,GAA+CG,MAAM,KAAKH,IAAjF,CAAP;AACA,CAFD;;AAIA,MAAMM,gBAAgB,GAAG,CAACC,SAAD,EAAY;AAACC,EAAAA;AAAD,CAAZ,KAA4B;AACpD,QAAMC,KAAK,GAAGF,SAAS,CAACG,KAAV,CAAgB,oCAAhB,CAAd;;AAEA,MAAI,CAACD,KAAL,EAAY;AACX,UAAM,IAAIE,KAAJ,CAAW,gBAAeJ,SAAU,EAApC,CAAN;AACA;;AAED,QAAMK,SAAS,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,KAAT,CAAe,GAAf,CAAlB;AACA,QAAMC,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAlB;AACA,QAAMM,IAAI,GAAGP,SAAS,GAAG,EAAH,GAAQC,KAAK,CAAC,CAAD,CAAnC;AAEA,MAAIO,MAAM,GAAG,KAAb;;AAEA,MAAIJ,SAAS,CAACA,SAAS,CAACK,MAAV,GAAmB,CAApB,CAAT,KAAoC,QAAxC,EAAkD;AACjDL,IAAAA,SAAS,CAACM,GAAV;AACAF,IAAAA,MAAM,GAAG,IAAT;AACA,GAhBmD,CAkBpD;;;AACA,QAAMG,QAAQ,GAAG,CAACP,SAAS,CAACQ,KAAV,MAAqB,EAAtB,EAA0BC,WAA1B,EAAjB;AACA,QAAMC,UAAU,GAAGV,SAAS,CAC1BW,GADiB,CACbC,SAAS,IAAI;AACjB,QAAI,CAACC,GAAD,EAAMC,KAAK,GAAG,EAAd,IAAoBF,SAAS,CAACX,KAAV,CAAgB,GAAhB,EAAqBU,GAArB,CAAyBI,MAAM,IAAIA,MAAM,CAACC,IAAP,EAAnC,CAAxB,CADiB,CAGjB;;AACA,QAAIH,GAAG,KAAK,SAAZ,EAAuB;AACtBC,MAAAA,KAAK,GAAGA,KAAK,CAACL,WAAN,EAAR;;AAEA,UAAIK,KAAK,KAAK5B,wBAAd,EAAwC;AACvC,eAAO,EAAP;AACA;AACD;;AAED,WAAQ,GAAE2B,GAAI,GAAEC,KAAK,GAAI,IAAGA,KAAM,EAAb,GAAiB,EAAG,EAAzC;AACA,GAdiB,EAejBvB,MAfiB,CAeV0B,OAfU,CAAnB;AAiBA,QAAMC,mBAAmB,GAAG,CAC3B,GAAGR,UADwB,CAA5B;;AAIA,MAAIN,MAAJ,EAAY;AACXc,IAAAA,mBAAmB,CAACC,IAApB,CAAyB,QAAzB;AACA;;AAED,MAAID,mBAAmB,CAACb,MAApB,KAA+B,CAA/B,IAAqCE,QAAQ,IAAIA,QAAQ,KAAKtB,0BAAlE,EAA+F;AAC9FiC,IAAAA,mBAAmB,CAACE,OAApB,CAA4Bb,QAA5B;AACA;;AAED,SAAQ,QAAOW,mBAAmB,CAACG,IAApB,CAAyB,GAAzB,CAA8B,IAAGjB,MAAM,GAAGF,IAAI,CAACc,IAAL,EAAH,GAAiBd,IAAK,GAAEC,IAAI,GAAI,IAAGA,IAAK,EAAZ,GAAgB,EAAG,EAArG;AACA,CAlDD;;AAoDA,MAAMmB,YAAY,GAAG,CAAC3B,SAAD,EAAY4B,OAAZ,KAAwB;AAC5CA,EAAAA,OAAO,GAAG;AACTC,IAAAA,eAAe,EAAE,OADR;AAETC,IAAAA,iBAAiB,EAAE,IAFV;AAGTC,IAAAA,SAAS,EAAE,KAHF;AAITC,IAAAA,UAAU,EAAE,KAJH;AAKTC,IAAAA,mBAAmB,EAAE,IALZ;AAMThC,IAAAA,SAAS,EAAE,KANF;AAOTiC,IAAAA,QAAQ,EAAE,IAPD;AAQTC,IAAAA,qBAAqB,EAAE,CAAC,WAAD,CARd;AASTC,IAAAA,mBAAmB,EAAE,IATZ;AAUTC,IAAAA,oBAAoB,EAAE,KAVb;AAWTC,IAAAA,mBAAmB,EAAE,IAXZ;AAYT,OAAGV;AAZM,GAAV,CAD4C,CAgB5C;;AACA,MAAIW,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAAqB,gBAArB,CAAJ,EAA4C;AAC3C,UAAM,IAAIxB,KAAJ,CAAU,wDAAV,CAAN;AACA;;AAED,MAAImC,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAAqB,eAArB,CAAJ,EAA2C;AAC1C,UAAM,IAAIxB,KAAJ,CAAU,wDAAV,CAAN;AACA;;AAED,MAAImC,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAAqB,eAArB,CAAJ,EAA2C;AAC1C,UAAM,IAAIxB,KAAJ,CAAU,uDAAV,CAAN;AACA;;AAEDJ,EAAAA,SAAS,GAAGA,SAAS,CAACqB,IAAV,EAAZ,CA7B4C,CA+B5C;;AACA,MAAI,UAAUvB,IAAV,CAAeE,SAAf,CAAJ,EAA+B;AAC9B,WAAOD,gBAAgB,CAACC,SAAD,EAAY4B,OAAZ,CAAvB;AACA;;AAED,QAAMa,mBAAmB,GAAGzC,SAAS,CAAC0C,UAAV,CAAqB,IAArB,CAA5B;AACA,QAAMC,aAAa,GAAG,CAACF,mBAAD,IAAwB,SAAS3C,IAAT,CAAcE,SAAd,CAA9C,CArC4C,CAuC5C;;AACA,MAAI,CAAC2C,aAAL,EAAoB;AACnB3C,IAAAA,SAAS,GAAGA,SAAS,CAAC4C,OAAV,CAAkB,0BAAlB,EAA8ChB,OAAO,CAACC,eAAtD,CAAZ;AACA;;AAED,QAAMgB,MAAM,GAAG,IAAI1D,SAAJ,CAAca,SAAd,CAAf;;AAEA,MAAI4B,OAAO,CAACG,SAAR,IAAqBH,OAAO,CAACI,UAAjC,EAA6C;AAC5C,UAAM,IAAI5B,KAAJ,CAAU,kEAAV,CAAN;AACA;;AAED,MAAIwB,OAAO,CAACG,SAAR,IAAqBc,MAAM,CAACC,QAAP,KAAoB,QAA7C,EAAuD;AACtDD,IAAAA,MAAM,CAACC,QAAP,GAAkB,OAAlB;AACA;;AAED,MAAIlB,OAAO,CAACI,UAAR,IAAsBa,MAAM,CAACC,QAAP,KAAoB,OAA9C,EAAuD;AACtDD,IAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACA,GAxD2C,CA0D5C;;;AACA,MAAIlB,OAAO,CAACK,mBAAZ,EAAiC;AAChCY,IAAAA,MAAM,CAACE,QAAP,GAAkB,EAAlB;AACAF,IAAAA,MAAM,CAACG,QAAP,GAAkB,EAAlB;AACA,GA9D2C,CAgE5C;;;AACA,MAAIpB,OAAO,CAAC3B,SAAZ,EAAuB;AACtB4C,IAAAA,MAAM,CAACrC,IAAP,GAAc,EAAd;AACA,GAnE2C,CAqE5C;;;AACA,MAAIqC,MAAM,CAACI,QAAX,EAAqB;AACpB;AACA;AACAJ,IAAAA,MAAM,CAACI,QAAP,GAAkBJ,MAAM,CAACI,QAAP,CAAgBL,OAAhB,CAAwB,mBAAxB,EAA6C,CAACM,CAAD,EAAIC,EAAJ,KAAW;AACzE,UAAI,WAAWrD,IAAX,CAAgBqD,EAAhB,CAAJ,EAAyB;AACxB,eAAQ,GAAEA,EAAG,GAAb;AACA;;AAED,aAAO,GAAP;AACA,KANiB,CAAlB;AAOA,GAhF2C,CAkF5C;;;AACA,MAAIN,MAAM,CAACI,QAAX,EAAqB;AACpBJ,IAAAA,MAAM,CAACI,QAAP,GAAkBG,SAAS,CAACP,MAAM,CAACI,QAAR,CAA3B;AACA,GArF2C,CAuF5C;;;AACA,MAAIrB,OAAO,CAACS,oBAAR,KAAiC,IAArC,EAA2C;AAC1CT,IAAAA,OAAO,CAACS,oBAAR,GAA+B,CAAC,iBAAD,CAA/B;AACA;;AAED,MAAIgB,KAAK,CAACC,OAAN,CAAc1B,OAAO,CAACS,oBAAtB,KAA+CT,OAAO,CAACS,oBAAR,CAA6B3B,MAA7B,GAAsC,CAAzF,EAA4F;AAC3F,QAAI6C,cAAc,GAAGV,MAAM,CAACI,QAAP,CAAgB3C,KAAhB,CAAsB,GAAtB,CAArB;AACA,UAAMkD,aAAa,GAAGD,cAAc,CAACA,cAAc,CAAC7C,MAAf,GAAwB,CAAzB,CAApC;;AAEA,QAAIlB,aAAa,CAACgE,aAAD,EAAgB5B,OAAO,CAACS,oBAAxB,CAAjB,EAAgE;AAC/DkB,MAAAA,cAAc,GAAGA,cAAc,CAACE,KAAf,CAAqB,CAArB,EAAwBF,cAAc,CAAC7C,MAAf,GAAwB,CAAhD,CAAjB;AACAmC,MAAAA,MAAM,CAACI,QAAP,GAAkBM,cAAc,CAACE,KAAf,CAAqB,CAArB,EAAwB/B,IAAxB,CAA6B,GAA7B,IAAoC,GAAtD;AACA;AACD;;AAED,MAAImB,MAAM,CAACa,QAAX,EAAqB;AACpB;AACAb,IAAAA,MAAM,CAACa,QAAP,GAAkBb,MAAM,CAACa,QAAP,CAAgBd,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAAlB,CAFoB,CAIpB;;AACA,QAAIhB,OAAO,CAACM,QAAR,IAAoB,0CAA0CpC,IAA1C,CAA+C+C,MAAM,CAACa,QAAtD,CAAxB,EAAyF;AACxF;AACA;AACA;AACAb,MAAAA,MAAM,CAACa,QAAP,GAAkBb,MAAM,CAACa,QAAP,CAAgBd,OAAhB,CAAwB,QAAxB,EAAkC,EAAlC,CAAlB;AACA;AACD,GAjH2C,CAmH5C;;;AACA,MAAIS,KAAK,CAACC,OAAN,CAAc1B,OAAO,CAACO,qBAAtB,CAAJ,EAAkD;AACjD,SAAK,MAAMjB,GAAX,IAAkB,CAAC,GAAG2B,MAAM,CAACc,YAAP,CAAoBC,IAApB,EAAJ,CAAlB,EAAmD;AAClD,UAAIpE,aAAa,CAAC0B,GAAD,EAAMU,OAAO,CAACO,qBAAd,CAAjB,EAAuD;AACtDU,QAAAA,MAAM,CAACc,YAAP,CAAoBE,MAApB,CAA2B3C,GAA3B;AACA;AACD;AACD,GA1H2C,CA4H5C;;;AACA,MAAIU,OAAO,CAACU,mBAAZ,EAAiC;AAChCO,IAAAA,MAAM,CAACc,YAAP,CAAoBG,IAApB;AACA;;AAED,MAAIlC,OAAO,CAACQ,mBAAZ,EAAiC;AAChCS,IAAAA,MAAM,CAACI,QAAP,GAAkBJ,MAAM,CAACI,QAAP,CAAgBL,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAAlB;AACA,GAnI2C,CAqI5C;;;AACA5C,EAAAA,SAAS,GAAG6C,MAAM,CAACkB,QAAP,EAAZ,CAtI4C,CAwI5C;;AACA,MAAI,CAACnC,OAAO,CAACQ,mBAAR,IAA+BS,MAAM,CAACI,QAAP,KAAoB,GAApD,KAA4DJ,MAAM,CAACrC,IAAP,KAAgB,EAAhF,EAAoF;AACnFR,IAAAA,SAAS,GAAGA,SAAS,CAAC4C,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAZ;AACA,GA3I2C,CA6I5C;;;AACA,MAAIH,mBAAmB,IAAI,CAACb,OAAO,CAACE,iBAApC,EAAuD;AACtD9B,IAAAA,SAAS,GAAGA,SAAS,CAAC4C,OAAV,CAAkB,YAAlB,EAAgC,IAAhC,CAAZ;AACA,GAhJ2C,CAkJ5C;;;AACA,MAAIhB,OAAO,CAACoC,aAAZ,EAA2B;AAC1BhE,IAAAA,SAAS,GAAGA,SAAS,CAAC4C,OAAV,CAAkB,mBAAlB,EAAuC,EAAvC,CAAZ;AACA;;AAED,SAAO5C,SAAP;AACA,CAxJD;;AA0JAiE,MAAM,CAACC,OAAP,GAAiBvC,YAAjB,C,CACA;;AACAsC,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBxC,YAAzB","sourcesContent":["'use strict';\n// TODO: Use the `URL` global when targeting Node.js 10\nconst URLParser = typeof URL === 'undefined' ? require('url').URL : URL;\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => {\n\treturn filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n};\n\nconst normalizeDataURL = (urlString, {stripHash}) => {\n\tconst parts = urlString.match(/^data:([^,]*?),([^#]*?)(?:#(.*))?$/);\n\n\tif (!parts) {\n\t\tthrow new Error(`Invalid URL: ${urlString}`);\n\t}\n\n\tconst mediaType = parts[1].split(';');\n\tconst body = parts[2];\n\tconst hash = stripHash ? '' : parts[3];\n\n\tlet base64 = false;\n\n\tif (mediaType[mediaType.length - 1] === 'base64') {\n\t\tmediaType.pop();\n\t\tbase64 = true;\n\t}\n\n\t// Lowercase MIME type\n\tconst mimeType = (mediaType.shift() || '').toLowerCase();\n\tconst attributes = mediaType\n\t\t.map(attribute => {\n\t\t\tlet [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n\t\t\t// Lowercase `charset`\n\t\t\tif (key === 'charset') {\n\t\t\t\tvalue = value.toLowerCase();\n\n\t\t\t\tif (value === DATA_URL_DEFAULT_CHARSET) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn `${key}${value ? `=${value}` : ''}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst normalizedMediaType = [\n\t\t...attributes\n\t];\n\n\tif (base64) {\n\t\tnormalizedMediaType.push('base64');\n\t}\n\n\tif (normalizedMediaType.length !== 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {\n\t\tnormalizedMediaType.unshift(mimeType);\n\t}\n\n\treturn `data:${normalizedMediaType.join(';')},${base64 ? body.trim() : body}${hash ? `#${hash}` : ''}`;\n};\n\nconst normalizeUrl = (urlString, options) => {\n\toptions = {\n\t\tdefaultProtocol: 'http:',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripAuthentication: true,\n\t\tstripHash: false,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tsortQueryParameters: true,\n\t\t...options\n\t};\n\n\t// TODO: Remove this at some point in the future\n\tif (Reflect.has(options, 'normalizeHttps')) {\n\t\tthrow new Error('options.normalizeHttps is renamed to options.forceHttp');\n\t}\n\n\tif (Reflect.has(options, 'normalizeHttp')) {\n\t\tthrow new Error('options.normalizeHttp is renamed to options.forceHttps');\n\t}\n\n\tif (Reflect.has(options, 'stripFragment')) {\n\t\tthrow new Error('options.stripFragment is renamed to options.stripHash');\n\t}\n\n\turlString = urlString.trim();\n\n\t// Data URL\n\tif (/^data:/i.test(urlString)) {\n\t\treturn normalizeDataURL(urlString, options);\n\t}\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n\t}\n\n\tconst urlObj = new URLParser(urlString);\n\n\tif (options.forceHttp && options.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (options.forceHttp && urlObj.protocol === 'https:') {\n\t\turlObj.protocol = 'http:';\n\t}\n\n\tif (options.forceHttps && urlObj.protocol === 'http:') {\n\t\turlObj.protocol = 'https:';\n\t}\n\n\t// Remove auth\n\tif (options.stripAuthentication) {\n\t\turlObj.username = '';\n\t\turlObj.password = '';\n\t}\n\n\t// Remove hash\n\tif (options.stripHash) {\n\t\turlObj.hash = '';\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\tif (urlObj.pathname) {\n\t\t// TODO: Use the following instead when targeting Node.js 10\n\t\t// `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\\/{2,}/g, '/');`\n\t\turlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\\/{2,}/g, (_, p1) => {\n\t\t\tif (/^(?!\\/)/g.test(p1)) {\n\t\t\t\treturn `${p1}/`;\n\t\t\t}\n\n\t\t\treturn '/';\n\t\t});\n\t}\n\n\t// Decode URI octets\n\tif (urlObj.pathname) {\n\t\turlObj.pathname = decodeURI(urlObj.pathname);\n\t}\n\n\t// Remove directory index\n\tif (options.removeDirectoryIndex === true) {\n\t\toptions.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObj.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, options.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, pathComponents.length - 1);\n\t\t\turlObj.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObj.hostname) {\n\t\t// Remove trailing dot\n\t\turlObj.hostname = urlObj.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (options.stripWWW && /^www\\.([a-z\\-\\d]{2,63})\\.([a-z.]{2,5})$/.test(urlObj.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 2).\n\t\t\t// The extension should be max 5 at length (min: 2).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\turlObj.hostname = urlObj.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(options.removeQueryParameters)) {\n\t\tfor (const key of [...urlObj.searchParams.keys()]) {\n\t\t\tif (testParameter(key, options.removeQueryParameters)) {\n\t\t\t\turlObj.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (options.sortQueryParameters) {\n\t\turlObj.searchParams.sort();\n\t}\n\n\tif (options.removeTrailingSlash) {\n\t\turlObj.pathname = urlObj.pathname.replace(/\\/$/, '');\n\t}\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObj.toString();\n\n\t// Remove ending `/`\n\tif ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !options.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\t// Remove http/https\n\tif (options.stripProtocol) {\n\t\turlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n\t}\n\n\treturn urlString;\n};\n\nmodule.exports = normalizeUrl;\n// TODO: Remove this for the next major release\nmodule.exports.default = normalizeUrl;\n"]},"metadata":{},"sourceType":"script"}