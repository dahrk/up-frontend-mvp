{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isObject = exports.pick = exports.assertNever = void 0;\n/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param _x The variable with no remaining values\n */\n\nfunction assertNever(_x) {\n  throw new Error(\"Unexpected value. Should have been never.\");\n}\n\nexports.assertNever = assertNever;\n\nfunction pick(base, keys) {\n  const entries = keys.map(key => [key, base === null || base === void 0 ? void 0 : base[key]]);\n  return Object.fromEntries(entries);\n}\n\nexports.pick = pick;\n\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null;\n}\n\nexports.isObject = isObject;","map":{"version":3,"sources":["../../src/helpers.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAMG;;AACH,SAAgB,WAAhB,CAA4B,EAA5B,EAAqC;AACnC,QAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAIA,SAAgB,IAAhB,CACE,IADF,EAEE,IAFF,EAEoB;AAElB,QAAM,OAAO,GAAG,IAAI,CAAC,GAAL,CAAS,GAAG,IAAI,CAAC,GAAD,EAAM,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAG,GAAH,CAAV,CAAhB,CAAhB;AACA,SAAO,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAAP;AACD;;AAND,OAAA,CAAA,IAAA,GAAA,IAAA;;AAQA,SAAgB,QAAhB,CAAyB,CAAzB,EAAmC;AACjC,SAAO,OAAO,CAAP,KAAa,QAAb,IAAyB,CAAC,KAAK,IAAtC;AACD;;AAFD,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param _x The variable with no remaining values\n */\nexport function assertNever(_x: never): never {\n  throw new Error(\"Unexpected value. Should have been never.\")\n}\n\nexport function pick<O extends unknown, K extends keyof O>(\n  base: O,\n  keys: readonly K[]\n): Pick<O, K> {\n  const entries = keys.map(key => [key, base?.[key]])\n  return Object.fromEntries(entries)\n}\n\nexport function isObject(o: unknown): o is Record<PropertyKey, unknown> {\n  return typeof o === \"object\" && o !== null\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}