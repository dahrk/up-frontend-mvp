{"ast":null,"code":"\"use strict\"; /// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst typedArrayTypeNames = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];\n\nfunction isTypedArrayName(name) {\n  return typedArrayTypeNames.includes(name);\n}\n\nconst objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'HTMLElement', ...typedArrayTypeNames];\n\nfunction isObjectTypeName(name) {\n  return objectTypeNames.includes(name);\n}\n\nconst primitiveTypeNames = ['null', 'undefined', 'string', 'number', 'bigint', 'boolean', 'symbol'];\n\nfunction isPrimitiveTypeName(name) {\n  return primitiveTypeNames.includes(name);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isOfType(type) {\n  return value => typeof value === type;\n}\n\nconst {\n  toString\n} = Object.prototype;\n\nconst getObjectType = value => {\n  const objectTypeName = toString.call(value).slice(8, -1);\n\n  if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n    return 'HTMLElement';\n  }\n\n  if (isObjectTypeName(objectTypeName)) {\n    return objectTypeName;\n  }\n\n  return undefined;\n};\n\nconst isObjectOfType = type => value => getObjectType(value) === type;\n\nfunction is(value) {\n  if (value === null) {\n    return 'null';\n  }\n\n  switch (typeof value) {\n    case 'undefined':\n      return 'undefined';\n\n    case 'string':\n      return 'string';\n\n    case 'number':\n      return 'number';\n\n    case 'boolean':\n      return 'boolean';\n\n    case 'function':\n      return 'Function';\n\n    case 'bigint':\n      return 'bigint';\n\n    case 'symbol':\n      return 'symbol';\n\n    default:\n  }\n\n  if (is.observable(value)) {\n    return 'Observable';\n  }\n\n  if (is.array(value)) {\n    return 'Array';\n  }\n\n  if (is.buffer(value)) {\n    return 'Buffer';\n  }\n\n  const tagType = getObjectType(value);\n\n  if (tagType) {\n    return tagType;\n  }\n\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n\n  return 'Object';\n}\n\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\n\nis.number = value => isNumberType(value) && !is.nan(value);\n\nis.bigint = isOfType('bigint'); // eslint-disable-next-line @typescript-eslint/ban-types\n\nis.function_ = isOfType('function');\n\nis.null_ = value => value === null;\n\nis.class_ = value => is.function_(value) && value.toString().startsWith('class ');\n\nis.boolean = value => value === true || value === false;\n\nis.symbol = isOfType('symbol');\n\nis.numericString = value => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\n\nis.array = (value, assertion) => {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n\n  if (!is.function_(assertion)) {\n    return true;\n  }\n\n  return value.every(assertion);\n};\n\nis.buffer = value => {\n  var _a, _b, _c, _d;\n\n  return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false;\n};\n\nis.nullOrUndefined = value => is.null_(value) || is.undefined(value);\n\nis.object = value => !is.null_(value) && (typeof value === 'object' || is.function_(value));\n\nis.iterable = value => {\n  var _a;\n\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]);\n};\n\nis.asyncIterable = value => {\n  var _a;\n\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]);\n};\n\nis.generator = value => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\n\nis.asyncGenerator = value => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\n\nis.nativePromise = value => isObjectOfType('Promise')(value);\n\nconst hasPromiseAPI = value => {\n  var _a, _b;\n\n  return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\n\nis.promise = value => is.nativePromise(value) || hasPromiseAPI(value);\n\nis.generatorFunction = isObjectOfType('GeneratorFunction');\n\nis.asyncGeneratorFunction = value => getObjectType(value) === 'AsyncGeneratorFunction';\n\nis.asyncFunction = value => getObjectType(value) === 'AsyncFunction'; // eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\n\n\nis.boundFunction = value => is.function_(value) && !value.hasOwnProperty('prototype');\n\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\n\nis.map = value => isObjectOfType('Map')(value);\n\nis.set = value => isObjectOfType('Set')(value);\n\nis.weakMap = value => isObjectOfType('WeakMap')(value);\n\nis.weakSet = value => isObjectOfType('WeakSet')(value);\n\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\n\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\n\nis.urlInstance = value => isObjectOfType('URL')(value);\n\nis.urlString = value => {\n  if (!is.string(value)) {\n    return false;\n  }\n\n  try {\n    new URL(value); // eslint-disable-line no-new\n\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}; // TODO: Use the `not` operator with a type guard here when it's available.\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\n\n\nis.truthy = value => Boolean(value); // Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\n\n\nis.falsy = value => !value;\n\nis.nan = value => Number.isNaN(value);\n\nis.primitive = value => is.null_(value) || isPrimitiveTypeName(typeof value);\n\nis.integer = value => Number.isInteger(value);\n\nis.safeInteger = value => Number.isSafeInteger(value);\n\nis.plainObject = value => {\n  // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n  if (toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(value);\n  return prototype === null || prototype === Object.getPrototypeOf({});\n};\n\nis.typedArray = value => isTypedArrayName(getObjectType(value));\n\nconst isValidLength = value => is.safeInteger(value) && value >= 0;\n\nis.arrayLike = value => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n\nis.inRange = (value, range) => {\n  if (is.number(range)) {\n    return value >= Math.min(0, range) && value <= Math.max(range, 0);\n  }\n\n  if (is.array(range) && range.length === 2) {\n    return value >= Math.min(...range) && value <= Math.max(...range);\n  }\n\n  throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\n\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\n\nis.domElement = value => {\n  return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n};\n\nis.observable = value => {\n  var _a, _b, _c, _d;\n\n  if (!value) {\n    return false;\n  } // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n\n\n  if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n    return true;\n  }\n\n  if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n    return true;\n  }\n\n  return false;\n};\n\nis.nodeStream = value => is.object(value) && is.function_(value.pipe) && !is.observable(value);\n\nis.infinite = value => value === Infinity || value === -Infinity;\n\nconst isAbsoluteMod2 = remainder => value => is.integer(value) && Math.abs(value % 2) === remainder;\n\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\n\nis.emptyArray = value => is.array(value) && value.length === 0;\n\nis.nonEmptyArray = value => is.array(value) && value.length > 0;\n\nis.emptyString = value => is.string(value) && value.length === 0; // TODO: Use `not ''` when the `not` operator is available.\n\n\nis.nonEmptyString = value => is.string(value) && value.length > 0;\n\nconst isWhiteSpaceString = value => is.string(value) && !/\\S/.test(value);\n\nis.emptyStringOrWhitespace = value => is.emptyString(value) || isWhiteSpaceString(value);\n\nis.emptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0; // TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n\n\nis.nonEmptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\n\nis.emptySet = value => is.set(value) && value.size === 0;\n\nis.nonEmptySet = value => is.set(value) && value.size > 0;\n\nis.emptyMap = value => is.map(value) && value.size === 0;\n\nis.nonEmptyMap = value => is.map(value) && value.size > 0;\n\nconst predicateOnArray = (method, predicate, values) => {\n  if (!is.function_(predicate)) {\n    throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n  }\n\n  if (values.length === 0) {\n    throw new TypeError('Invalid number of values');\n  }\n\n  return method.call(values, predicate);\n};\n\nis.any = (predicate, ...values) => {\n  const predicates = is.array(predicate) ? predicate : [predicate];\n  return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\n\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\n\nconst assertType = (condition, description, value, options = {}) => {\n  if (!condition) {\n    const {\n      multipleValues\n    } = options;\n    const valuesMessage = multipleValues ? `received values of types ${[...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``))].join(', ')}` : `received value of type \\`${is(value)}\\``;\n    throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n  }\n};\n\nexports.assert = {\n  // Unknowns.\n  undefined: value => assertType(is.undefined(value), 'undefined', value),\n  string: value => assertType(is.string(value), 'string', value),\n  number: value => assertType(is.number(value), 'number', value),\n  bigint: value => assertType(is.bigint(value), 'bigint', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  function_: value => assertType(is.function_(value), 'Function', value),\n  null_: value => assertType(is.null_(value), 'null', value),\n  class_: value => assertType(is.class_(value), \"Class\"\n  /* class_ */\n  , value),\n  boolean: value => assertType(is.boolean(value), 'boolean', value),\n  symbol: value => assertType(is.symbol(value), 'symbol', value),\n  numericString: value => assertType(is.numericString(value), \"string with a number\"\n  /* numericString */\n  , value),\n  array: (value, assertion) => {\n    const assert = assertType;\n    assert(is.array(value), 'Array', value);\n\n    if (assertion) {\n      value.forEach(assertion);\n    }\n  },\n  buffer: value => assertType(is.buffer(value), 'Buffer', value),\n  nullOrUndefined: value => assertType(is.nullOrUndefined(value), \"null or undefined\"\n  /* nullOrUndefined */\n  , value),\n  object: value => assertType(is.object(value), 'Object', value),\n  iterable: value => assertType(is.iterable(value), \"Iterable\"\n  /* iterable */\n  , value),\n  asyncIterable: value => assertType(is.asyncIterable(value), \"AsyncIterable\"\n  /* asyncIterable */\n  , value),\n  generator: value => assertType(is.generator(value), 'Generator', value),\n  asyncGenerator: value => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n  nativePromise: value => assertType(is.nativePromise(value), \"native Promise\"\n  /* nativePromise */\n  , value),\n  promise: value => assertType(is.promise(value), 'Promise', value),\n  generatorFunction: value => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n  asyncGeneratorFunction: value => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  asyncFunction: value => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  boundFunction: value => assertType(is.boundFunction(value), 'Function', value),\n  regExp: value => assertType(is.regExp(value), 'RegExp', value),\n  date: value => assertType(is.date(value), 'Date', value),\n  error: value => assertType(is.error(value), 'Error', value),\n  map: value => assertType(is.map(value), 'Map', value),\n  set: value => assertType(is.set(value), 'Set', value),\n  weakMap: value => assertType(is.weakMap(value), 'WeakMap', value),\n  weakSet: value => assertType(is.weakSet(value), 'WeakSet', value),\n  int8Array: value => assertType(is.int8Array(value), 'Int8Array', value),\n  uint8Array: value => assertType(is.uint8Array(value), 'Uint8Array', value),\n  uint8ClampedArray: value => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n  int16Array: value => assertType(is.int16Array(value), 'Int16Array', value),\n  uint16Array: value => assertType(is.uint16Array(value), 'Uint16Array', value),\n  int32Array: value => assertType(is.int32Array(value), 'Int32Array', value),\n  uint32Array: value => assertType(is.uint32Array(value), 'Uint32Array', value),\n  float32Array: value => assertType(is.float32Array(value), 'Float32Array', value),\n  float64Array: value => assertType(is.float64Array(value), 'Float64Array', value),\n  bigInt64Array: value => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n  bigUint64Array: value => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n  arrayBuffer: value => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n  sharedArrayBuffer: value => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n  dataView: value => assertType(is.dataView(value), 'DataView', value),\n  urlInstance: value => assertType(is.urlInstance(value), 'URL', value),\n  urlString: value => assertType(is.urlString(value), \"string with a URL\"\n  /* urlString */\n  , value),\n  truthy: value => assertType(is.truthy(value), \"truthy\"\n  /* truthy */\n  , value),\n  falsy: value => assertType(is.falsy(value), \"falsy\"\n  /* falsy */\n  , value),\n  nan: value => assertType(is.nan(value), \"NaN\"\n  /* nan */\n  , value),\n  primitive: value => assertType(is.primitive(value), \"primitive\"\n  /* primitive */\n  , value),\n  integer: value => assertType(is.integer(value), \"integer\"\n  /* integer */\n  , value),\n  safeInteger: value => assertType(is.safeInteger(value), \"integer\"\n  /* safeInteger */\n  , value),\n  plainObject: value => assertType(is.plainObject(value), \"plain object\"\n  /* plainObject */\n  , value),\n  typedArray: value => assertType(is.typedArray(value), \"TypedArray\"\n  /* typedArray */\n  , value),\n  arrayLike: value => assertType(is.arrayLike(value), \"array-like\"\n  /* arrayLike */\n  , value),\n  domElement: value => assertType(is.domElement(value), \"HTMLElement\"\n  /* domElement */\n  , value),\n  observable: value => assertType(is.observable(value), 'Observable', value),\n  nodeStream: value => assertType(is.nodeStream(value), \"Node.js Stream\"\n  /* nodeStream */\n  , value),\n  infinite: value => assertType(is.infinite(value), \"infinite number\"\n  /* infinite */\n  , value),\n  emptyArray: value => assertType(is.emptyArray(value), \"empty array\"\n  /* emptyArray */\n  , value),\n  nonEmptyArray: value => assertType(is.nonEmptyArray(value), \"non-empty array\"\n  /* nonEmptyArray */\n  , value),\n  emptyString: value => assertType(is.emptyString(value), \"empty string\"\n  /* emptyString */\n  , value),\n  nonEmptyString: value => assertType(is.nonEmptyString(value), \"non-empty string\"\n  /* nonEmptyString */\n  , value),\n  emptyStringOrWhitespace: value => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\"\n  /* emptyStringOrWhitespace */\n  , value),\n  emptyObject: value => assertType(is.emptyObject(value), \"empty object\"\n  /* emptyObject */\n  , value),\n  nonEmptyObject: value => assertType(is.nonEmptyObject(value), \"non-empty object\"\n  /* nonEmptyObject */\n  , value),\n  emptySet: value => assertType(is.emptySet(value), \"empty set\"\n  /* emptySet */\n  , value),\n  nonEmptySet: value => assertType(is.nonEmptySet(value), \"non-empty set\"\n  /* nonEmptySet */\n  , value),\n  emptyMap: value => assertType(is.emptyMap(value), \"empty map\"\n  /* emptyMap */\n  , value),\n  nonEmptyMap: value => assertType(is.nonEmptyMap(value), \"non-empty map\"\n  /* nonEmptyMap */\n  , value),\n  // Numbers.\n  evenInteger: value => assertType(is.evenInteger(value), \"even integer\"\n  /* evenInteger */\n  , value),\n  oddInteger: value => assertType(is.oddInteger(value), \"odd integer\"\n  /* oddInteger */\n  , value),\n  // Two arguments.\n  directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\"\n  /* directInstanceOf */\n  , instance),\n  inRange: (value, range) => assertType(is.inRange(value, range), \"in range\"\n  /* inRange */\n  , value),\n  // Variadic functions.\n  any: (predicate, ...values) => {\n    return assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\"\n    /* any */\n    , values, {\n      multipleValues: true\n    });\n  },\n  all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\"\n  /* all */\n  , values, {\n    multipleValues: true\n  })\n}; // Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\n\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nObject.defineProperties(exports.assert, {\n  class: {\n    value: exports.assert.class_\n  },\n  function: {\n    value: exports.assert.function_\n  },\n  null: {\n    value: exports.assert.null_\n  }\n});\nexports.default = is; // For CommonJS default export support\n\nmodule.exports = is;\nmodule.exports.default = is;\nmodule.exports.assert = exports.assert;","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/@sindresorhus/is/dist/index.js"],"names":["Object","defineProperty","exports","value","typedArrayTypeNames","isTypedArrayName","name","includes","objectTypeNames","isObjectTypeName","primitiveTypeNames","isPrimitiveTypeName","isOfType","type","toString","prototype","getObjectType","objectTypeName","call","slice","test","is","domElement","undefined","isObjectOfType","observable","array","buffer","tagType","String","Boolean","Number","TypeError","string","isNumberType","number","nan","bigint","function_","null_","class_","startsWith","boolean","symbol","numericString","emptyStringOrWhitespace","isNaN","assertion","Array","isArray","every","_a","_b","_c","_d","constructor","isBuffer","nullOrUndefined","object","iterable","Symbol","iterator","asyncIterable","asyncIterator","generator","next","throw","asyncGenerator","nativePromise","hasPromiseAPI","then","catch","promise","generatorFunction","asyncGeneratorFunction","asyncFunction","boundFunction","hasOwnProperty","regExp","date","error","map","set","weakMap","weakSet","int8Array","uint8Array","uint8ClampedArray","int16Array","uint16Array","int32Array","uint32Array","float32Array","float64Array","bigInt64Array","bigUint64Array","arrayBuffer","sharedArrayBuffer","dataView","directInstanceOf","instance","getPrototypeOf","urlInstance","urlString","URL","truthy","falsy","primitive","integer","isInteger","safeInteger","isSafeInteger","plainObject","typedArray","isValidLength","arrayLike","length","inRange","range","Math","min","max","JSON","stringify","NODE_TYPE_ELEMENT","DOM_PROPERTIES_TO_CHECK","nodeType","nodeName","property","nodeStream","pipe","infinite","Infinity","isAbsoluteMod2","remainder","abs","evenInteger","oddInteger","emptyArray","nonEmptyArray","emptyString","nonEmptyString","isWhiteSpaceString","emptyObject","keys","nonEmptyObject","emptySet","size","nonEmptySet","emptyMap","nonEmptyMap","predicateOnArray","method","predicate","values","any","predicates","some","singlePredicate","all","assertType","condition","description","options","multipleValues","valuesMessage","Set","singleValue","join","assert","forEach","defineProperties","class","function","null","default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n/// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array'\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'HTMLElement',\n    ...typedArrayTypeNames\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol'\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value) => typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value) => {\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type) => (value) => getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined':\n            return 'undefined';\n        case 'string':\n            return 'string';\n        case 'number':\n            return 'number';\n        case 'boolean':\n            return 'boolean';\n        case 'function':\n            return 'Function';\n        case 'bigint':\n            return 'bigint';\n        case 'symbol':\n            return 'symbol';\n        default:\n    }\n    if (is.observable(value)) {\n        return 'Observable';\n    }\n    if (is.array(value)) {\n        return 'Array';\n    }\n    if (is.buffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = (value) => isNumberType(value) && !is.nan(value);\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\nis.null_ = (value) => value === null;\nis.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = (value) => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    return value.every(assertion);\n};\nis.buffer = (value) => { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false; };\nis.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);\nis.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value));\nis.iterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]); };\nis.asyncIterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]); };\nis.generator = (value) => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value) => isObjectOfType('Promise')(value);\nconst hasPromiseAPI = (value) => {\n    var _a, _b;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) &&\n        is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\nis.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = (value) => isObjectOfType('Map')(value);\nis.set = (value) => isObjectOfType('Set')(value);\nis.weakMap = (value) => isObjectOfType('WeakMap')(value);\nis.weakSet = (value) => isObjectOfType('WeakSet')(value);\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value) => isObjectOfType('URL')(value);\nis.urlString = (value) => {\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n};\n// TODO: Use the `not` operator with a type guard here when it's available.\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value) => Boolean(value);\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value) => !value;\nis.nan = (value) => Number.isNaN(value);\nis.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value) => Number.isInteger(value);\nis.safeInteger = (value) => Number.isSafeInteger(value);\nis.plainObject = (value) => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.getPrototypeOf({});\n};\nis.typedArray = (value) => isTypedArrayName(getObjectType(value));\nconst isValidLength = (value) => is.safeInteger(value) && value >= 0;\nis.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.inRange = (value, range) => {\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue'\n];\nis.domElement = (value) => {\n    return is.object(value) &&\n        value.nodeType === NODE_TYPE_ELEMENT &&\n        is.string(value.nodeName) &&\n        !is.plainObject(value) &&\n        DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n};\nis.observable = (value) => {\n    var _a, _b, _c, _d;\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n    if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n        return true;\n    }\n    if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value) => value === Infinity || value === -Infinity;\nconst isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value) => is.array(value) && value.length === 0;\nis.nonEmptyArray = (value) => is.array(value) && value.length > 0;\nis.emptyString = (value) => is.string(value) && value.length === 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value) => is.string(value) && value.length > 0;\nconst isWhiteSpaceString = (value) => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);\nis.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nis.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value) => is.set(value) && value.size === 0;\nis.nonEmptySet = (value) => is.set(value) && value.size > 0;\nis.emptyMap = (value) => is.map(value) && value.size === 0;\nis.nonEmptyMap = (value) => is.map(value) && value.size > 0;\nconst predicateOnArray = (method, predicate, values) => {\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n    const predicates = is.array(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {}) => {\n    if (!condition) {\n        const { multipleValues } = options;\n        const valuesMessage = multipleValues ?\n            `received values of types ${[\n                ...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``))\n            ].join(', ')}` :\n            `received value of type \\`${is(value)}\\``;\n        throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n    }\n};\nexports.assert = {\n    // Unknowns.\n    undefined: (value) => assertType(is.undefined(value), 'undefined', value),\n    string: (value) => assertType(is.string(value), 'string', value),\n    number: (value) => assertType(is.number(value), 'number', value),\n    bigint: (value) => assertType(is.bigint(value), 'bigint', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value) => assertType(is.function_(value), 'Function', value),\n    null_: (value) => assertType(is.null_(value), 'null', value),\n    class_: (value) => assertType(is.class_(value), \"Class\" /* class_ */, value),\n    boolean: (value) => assertType(is.boolean(value), 'boolean', value),\n    symbol: (value) => assertType(is.symbol(value), 'symbol', value),\n    numericString: (value) => assertType(is.numericString(value), \"string with a number\" /* numericString */, value),\n    array: (value, assertion) => {\n        const assert = assertType;\n        assert(is.array(value), 'Array', value);\n        if (assertion) {\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),\n    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), \"null or undefined\" /* nullOrUndefined */, value),\n    object: (value) => assertType(is.object(value), 'Object', value),\n    iterable: (value) => assertType(is.iterable(value), \"Iterable\" /* iterable */, value),\n    asyncIterable: (value) => assertType(is.asyncIterable(value), \"AsyncIterable\" /* asyncIterable */, value),\n    generator: (value) => assertType(is.generator(value), 'Generator', value),\n    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n    nativePromise: (value) => assertType(is.nativePromise(value), \"native Promise\" /* nativePromise */, value),\n    promise: (value) => assertType(is.promise(value), 'Promise', value),\n    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),\n    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),\n    date: (value) => assertType(is.date(value), 'Date', value),\n    error: (value) => assertType(is.error(value), 'Error', value),\n    map: (value) => assertType(is.map(value), 'Map', value),\n    set: (value) => assertType(is.set(value), 'Set', value),\n    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),\n    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),\n    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),\n    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),\n    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),\n    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),\n    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),\n    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),\n    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),\n    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),\n    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n    dataView: (value) => assertType(is.dataView(value), 'DataView', value),\n    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),\n    urlString: (value) => assertType(is.urlString(value), \"string with a URL\" /* urlString */, value),\n    truthy: (value) => assertType(is.truthy(value), \"truthy\" /* truthy */, value),\n    falsy: (value) => assertType(is.falsy(value), \"falsy\" /* falsy */, value),\n    nan: (value) => assertType(is.nan(value), \"NaN\" /* nan */, value),\n    primitive: (value) => assertType(is.primitive(value), \"primitive\" /* primitive */, value),\n    integer: (value) => assertType(is.integer(value), \"integer\" /* integer */, value),\n    safeInteger: (value) => assertType(is.safeInteger(value), \"integer\" /* safeInteger */, value),\n    plainObject: (value) => assertType(is.plainObject(value), \"plain object\" /* plainObject */, value),\n    typedArray: (value) => assertType(is.typedArray(value), \"TypedArray\" /* typedArray */, value),\n    arrayLike: (value) => assertType(is.arrayLike(value), \"array-like\" /* arrayLike */, value),\n    domElement: (value) => assertType(is.domElement(value), \"HTMLElement\" /* domElement */, value),\n    observable: (value) => assertType(is.observable(value), 'Observable', value),\n    nodeStream: (value) => assertType(is.nodeStream(value), \"Node.js Stream\" /* nodeStream */, value),\n    infinite: (value) => assertType(is.infinite(value), \"infinite number\" /* infinite */, value),\n    emptyArray: (value) => assertType(is.emptyArray(value), \"empty array\" /* emptyArray */, value),\n    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), \"non-empty array\" /* nonEmptyArray */, value),\n    emptyString: (value) => assertType(is.emptyString(value), \"empty string\" /* emptyString */, value),\n    nonEmptyString: (value) => assertType(is.nonEmptyString(value), \"non-empty string\" /* nonEmptyString */, value),\n    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* emptyStringOrWhitespace */, value),\n    emptyObject: (value) => assertType(is.emptyObject(value), \"empty object\" /* emptyObject */, value),\n    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), \"non-empty object\" /* nonEmptyObject */, value),\n    emptySet: (value) => assertType(is.emptySet(value), \"empty set\" /* emptySet */, value),\n    nonEmptySet: (value) => assertType(is.nonEmptySet(value), \"non-empty set\" /* nonEmptySet */, value),\n    emptyMap: (value) => assertType(is.emptyMap(value), \"empty map\" /* emptyMap */, value),\n    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), \"non-empty map\" /* nonEmptyMap */, value),\n    // Numbers.\n    evenInteger: (value) => assertType(is.evenInteger(value), \"even integer\" /* evenInteger */, value),\n    oddInteger: (value) => assertType(is.oddInteger(value), \"odd integer\" /* oddInteger */, value),\n    // Two arguments.\n    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* directInstanceOf */, instance),\n    inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* inRange */, value),\n    // Variadic functions.\n    any: (predicate, ...values) => {\n        return assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* any */, values, { multipleValues: true });\n    },\n    all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* all */, values, { multipleValues: true })\n};\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_\n    },\n    function: {\n        value: is.function_\n    },\n    null: {\n        value: is.null_\n    }\n});\nObject.defineProperties(exports.assert, {\n    class: {\n        value: exports.assert.class_\n    },\n    function: {\n        value: exports.assert.function_\n    },\n    null: {\n        value: exports.assert.null_\n    }\n});\nexports.default = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports.default = is;\nmodule.exports.assert = exports.assert;\n"]},"metadata":{},"sourceType":"script"}