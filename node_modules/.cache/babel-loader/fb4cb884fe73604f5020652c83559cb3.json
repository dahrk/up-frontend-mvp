{"ast":null,"code":"'use strict';\n\nconst {\n  Transform,\n  PassThrough\n} = require('stream');\n\nconst zlib = require('zlib');\n\nconst mimicResponse = require('mimic-response');\n\nmodule.exports = response => {\n  const contentEncoding = (response.headers['content-encoding'] || '').toLowerCase();\n\n  if (!['gzip', 'deflate', 'br'].includes(contentEncoding)) {\n    return response;\n  } // TODO: Remove this when targeting Node.js 12.\n\n\n  const isBrotli = contentEncoding === 'br';\n\n  if (isBrotli && typeof zlib.createBrotliDecompress !== 'function') {\n    response.destroy(new Error('Brotli is not supported on Node.js < 12'));\n    return response;\n  }\n\n  let isEmpty = true;\n  const checker = new Transform({\n    transform(data, _encoding, callback) {\n      isEmpty = false;\n      callback(null, data);\n    },\n\n    flush(callback) {\n      callback();\n    }\n\n  });\n  const finalStream = new PassThrough({\n    autoDestroy: false,\n\n    destroy(error, callback) {\n      response.destroy();\n      callback(error);\n    }\n\n  });\n  const decompressStream = isBrotli ? zlib.createBrotliDecompress() : zlib.createUnzip();\n  decompressStream.once('error', error => {\n    if (isEmpty && !response.readable) {\n      finalStream.end();\n      return;\n    }\n\n    finalStream.destroy(error);\n  });\n  mimicResponse(response, finalStream);\n  response.pipe(checker).pipe(decompressStream).pipe(finalStream);\n  return finalStream;\n};","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/decompress-response/index.js"],"names":["Transform","PassThrough","require","zlib","mimicResponse","module","exports","response","contentEncoding","headers","toLowerCase","includes","isBrotli","createBrotliDecompress","destroy","Error","isEmpty","checker","transform","data","_encoding","callback","flush","finalStream","autoDestroy","error","decompressStream","createUnzip","once","readable","end","pipe"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,IAA2BC,OAAO,CAAC,QAAD,CAAxC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,QAAQ,IAAI;AAC5B,QAAMC,eAAe,GAAG,CAACD,QAAQ,CAACE,OAAT,CAAiB,kBAAjB,KAAwC,EAAzC,EAA6CC,WAA7C,EAAxB;;AAEA,MAAI,CAAC,CAAC,MAAD,EAAS,SAAT,EAAoB,IAApB,EAA0BC,QAA1B,CAAmCH,eAAnC,CAAL,EAA0D;AACzD,WAAOD,QAAP;AACA,GAL2B,CAO5B;;;AACA,QAAMK,QAAQ,GAAGJ,eAAe,KAAK,IAArC;;AACA,MAAII,QAAQ,IAAI,OAAOT,IAAI,CAACU,sBAAZ,KAAuC,UAAvD,EAAmE;AAClEN,IAAAA,QAAQ,CAACO,OAAT,CAAiB,IAAIC,KAAJ,CAAU,yCAAV,CAAjB;AACA,WAAOR,QAAP;AACA;;AAED,MAAIS,OAAO,GAAG,IAAd;AAEA,QAAMC,OAAO,GAAG,IAAIjB,SAAJ,CAAc;AAC7BkB,IAAAA,SAAS,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4B;AACpCL,MAAAA,OAAO,GAAG,KAAV;AAEAK,MAAAA,QAAQ,CAAC,IAAD,EAAOF,IAAP,CAAR;AACA,KAL4B;;AAO7BG,IAAAA,KAAK,CAACD,QAAD,EAAW;AACfA,MAAAA,QAAQ;AACR;;AAT4B,GAAd,CAAhB;AAYA,QAAME,WAAW,GAAG,IAAItB,WAAJ,CAAgB;AACnCuB,IAAAA,WAAW,EAAE,KADsB;;AAEnCV,IAAAA,OAAO,CAACW,KAAD,EAAQJ,QAAR,EAAkB;AACxBd,MAAAA,QAAQ,CAACO,OAAT;AAEAO,MAAAA,QAAQ,CAACI,KAAD,CAAR;AACA;;AANkC,GAAhB,CAApB;AASA,QAAMC,gBAAgB,GAAGd,QAAQ,GAAGT,IAAI,CAACU,sBAAL,EAAH,GAAmCV,IAAI,CAACwB,WAAL,EAApE;AAEAD,EAAAA,gBAAgB,CAACE,IAAjB,CAAsB,OAAtB,EAA+BH,KAAK,IAAI;AACvC,QAAIT,OAAO,IAAI,CAACT,QAAQ,CAACsB,QAAzB,EAAmC;AAClCN,MAAAA,WAAW,CAACO,GAAZ;AACA;AACA;;AAEDP,IAAAA,WAAW,CAACT,OAAZ,CAAoBW,KAApB;AACA,GAPD;AASArB,EAAAA,aAAa,CAACG,QAAD,EAAWgB,WAAX,CAAb;AACAhB,EAAAA,QAAQ,CAACwB,IAAT,CAAcd,OAAd,EAAuBc,IAAvB,CAA4BL,gBAA5B,EAA8CK,IAA9C,CAAmDR,WAAnD;AAEA,SAAOA,WAAP;AACA,CApDD","sourcesContent":["'use strict';\nconst {Transform, PassThrough} = require('stream');\nconst zlib = require('zlib');\nconst mimicResponse = require('mimic-response');\n\nmodule.exports = response => {\n\tconst contentEncoding = (response.headers['content-encoding'] || '').toLowerCase();\n\n\tif (!['gzip', 'deflate', 'br'].includes(contentEncoding)) {\n\t\treturn response;\n\t}\n\n\t// TODO: Remove this when targeting Node.js 12.\n\tconst isBrotli = contentEncoding === 'br';\n\tif (isBrotli && typeof zlib.createBrotliDecompress !== 'function') {\n\t\tresponse.destroy(new Error('Brotli is not supported on Node.js < 12'));\n\t\treturn response;\n\t}\n\n\tlet isEmpty = true;\n\n\tconst checker = new Transform({\n\t\ttransform(data, _encoding, callback) {\n\t\t\tisEmpty = false;\n\n\t\t\tcallback(null, data);\n\t\t},\n\n\t\tflush(callback) {\n\t\t\tcallback();\n\t\t}\n\t});\n\n\tconst finalStream = new PassThrough({\n\t\tautoDestroy: false,\n\t\tdestroy(error, callback) {\n\t\t\tresponse.destroy();\n\n\t\t\tcallback(error);\n\t\t}\n\t});\n\n\tconst decompressStream = isBrotli ? zlib.createBrotliDecompress() : zlib.createUnzip();\n\n\tdecompressStream.once('error', error => {\n\t\tif (isEmpty && !response.readable) {\n\t\t\tfinalStream.end();\n\t\t\treturn;\n\t\t}\n\n\t\tfinalStream.destroy(error);\n\t});\n\n\tmimicResponse(response, finalStream);\n\tresponse.pipe(checker).pipe(decompressStream).pipe(finalStream);\n\n\treturn finalStream;\n};\n"]},"metadata":{},"sourceType":"script"}