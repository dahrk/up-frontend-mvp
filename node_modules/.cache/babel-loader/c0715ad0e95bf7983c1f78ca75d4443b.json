{"ast":null,"code":"'use strict'; // rfc7231 6.1\n\nconst statusCodeCacheableByDefault = new Set([200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501]); // This implementation does not understand partial responses (206)\n\nconst understoodStatuses = new Set([200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501]);\nconst errorStatusCodes = new Set([500, 502, 503, 504]);\nconst hopByHopHeaders = {\n  date: true,\n  // included, because we add Age update Date\n  connection: true,\n  'keep-alive': true,\n  'proxy-authenticate': true,\n  'proxy-authorization': true,\n  te: true,\n  trailer: true,\n  'transfer-encoding': true,\n  upgrade: true\n};\nconst excludedFromRevalidationUpdate = {\n  // Since the old body is reused, it doesn't make sense to change properties of the body\n  'content-length': true,\n  'content-encoding': true,\n  'transfer-encoding': true,\n  'content-range': true\n};\n\nfunction toNumberOrZero(s) {\n  const n = parseInt(s, 10);\n  return isFinite(n) ? n : 0;\n} // RFC 5861\n\n\nfunction isErrorResponse(response) {\n  // consider undefined response as faulty\n  if (!response) {\n    return true;\n  }\n\n  return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n  const cc = {};\n  if (!header) return cc; // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n  // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n\n  const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n\n  for (const part of parts) {\n    const [k, v] = part.split(/\\s*=\\s*/, 2);\n    cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n  }\n\n  return cc;\n}\n\nfunction formatCacheControl(cc) {\n  let parts = [];\n\n  for (const k in cc) {\n    const v = cc[k];\n    parts.push(v === true ? k : k + '=' + v);\n  }\n\n  if (!parts.length) {\n    return undefined;\n  }\n\n  return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n  constructor(req, res, {\n    shared,\n    cacheHeuristic,\n    immutableMinTimeToLive,\n    ignoreCargoCult,\n    _fromObject\n  } = {}) {\n    if (_fromObject) {\n      this._fromObject(_fromObject);\n\n      return;\n    }\n\n    if (!res || !res.headers) {\n      throw Error('Response headers missing');\n    }\n\n    this._assertRequestHasHeaders(req);\n\n    this._responseTime = this.now();\n    this._isShared = shared !== false;\n    this._cacheHeuristic = undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n\n    this._immutableMinTtl = undefined !== immutableMinTimeToLive ? immutableMinTimeToLive : 24 * 3600 * 1000;\n    this._status = 'status' in res ? res.status : 200;\n    this._resHeaders = res.headers;\n    this._rescc = parseCacheControl(res.headers['cache-control']);\n    this._method = 'method' in req ? req.method : 'GET';\n    this._url = req.url;\n    this._host = req.headers.host;\n    this._noAuthorization = !req.headers.authorization;\n    this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n\n    this._reqcc = parseCacheControl(req.headers['cache-control']); // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n    // so there's no point stricly adhering to the blindly copy&pasted directives.\n\n    if (ignoreCargoCult && 'pre-check' in this._rescc && 'post-check' in this._rescc) {\n      delete this._rescc['pre-check'];\n      delete this._rescc['post-check'];\n      delete this._rescc['no-cache'];\n      delete this._rescc['no-store'];\n      delete this._rescc['must-revalidate'];\n      this._resHeaders = Object.assign({}, this._resHeaders, {\n        'cache-control': formatCacheControl(this._rescc)\n      });\n      delete this._resHeaders.expires;\n      delete this._resHeaders.pragma;\n    } // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n    // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n\n\n    if (res.headers['cache-control'] == null && /no-cache/.test(res.headers.pragma)) {\n      this._rescc['no-cache'] = true;\n    }\n  }\n\n  now() {\n    return Date.now();\n  }\n\n  storable() {\n    // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n    return !!(!this._reqcc['no-store'] && ( // A cache MUST NOT store a response to any request, unless:\n    // The request method is understood by the cache and defined as being cacheable, and\n    'GET' === this._method || 'HEAD' === this._method || 'POST' === this._method && this._hasExplicitExpiration()) && // the response status code is understood by the cache, and\n    understoodStatuses.has(this._status) && // the \"no-store\" cache directive does not appear in request or response header fields, and\n    !this._rescc['no-store'] && ( // the \"private\" response directive does not appear in the response, if the cache is shared, and\n    !this._isShared || !this._rescc.private) && ( // the Authorization header field does not appear in the request, if the cache is shared,\n    !this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && ( // the response either:\n    // contains an Expires header field, or\n    this._resHeaders.expires || // contains a max-age response directive, or\n    // contains a s-maxage response directive and the cache is shared, or\n    // contains a public response directive.\n    this._rescc['max-age'] || this._isShared && this._rescc['s-maxage'] || this._rescc.public || // has a status code that is defined as cacheable by default\n    statusCodeCacheableByDefault.has(this._status)));\n  }\n\n  _hasExplicitExpiration() {\n    // 4.2.1 Calculating Freshness Lifetime\n    return this._isShared && this._rescc['s-maxage'] || this._rescc['max-age'] || this._resHeaders.expires;\n  }\n\n  _assertRequestHasHeaders(req) {\n    if (!req || !req.headers) {\n      throw Error('Request headers missing');\n    }\n  }\n\n  satisfiesWithoutRevalidation(req) {\n    this._assertRequestHasHeaders(req); // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n    // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n    // unless the stored response is successfully validated (Section 4.3), and\n\n\n    const requestCC = parseCacheControl(req.headers['cache-control']);\n\n    if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n      return false;\n    }\n\n    if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n      return false;\n    }\n\n    if (requestCC['min-fresh'] && this.timeToLive() < 1000 * requestCC['min-fresh']) {\n      return false;\n    } // the stored response is either:\n    // fresh, or allowed to be served stale\n\n\n    if (this.stale()) {\n      const allowsStale = requestCC['max-stale'] && !this._rescc['must-revalidate'] && (true === requestCC['max-stale'] || requestCC['max-stale'] > this.age() - this.maxAge());\n\n      if (!allowsStale) {\n        return false;\n      }\n    }\n\n    return this._requestMatches(req, false);\n  }\n\n  _requestMatches(req, allowHeadMethod) {\n    // The presented effective request URI and that of the stored response match, and\n    return (!this._url || this._url === req.url) && this._host === req.headers.host && ( // the request method associated with the stored response allows it to be used for the presented request, and\n    !req.method || this._method === req.method || allowHeadMethod && 'HEAD' === req.method) && // selecting header fields nominated by the stored response (if any) match those presented, and\n    this._varyMatches(req);\n  }\n\n  _allowsStoringAuthenticated() {\n    //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n    return this._rescc['must-revalidate'] || this._rescc.public || this._rescc['s-maxage'];\n  }\n\n  _varyMatches(req) {\n    if (!this._resHeaders.vary) {\n      return true;\n    } // A Vary header field-value of \"*\" always fails to match\n\n\n    if (this._resHeaders.vary === '*') {\n      return false;\n    }\n\n    const fields = this._resHeaders.vary.trim().toLowerCase().split(/\\s*,\\s*/);\n\n    for (const name of fields) {\n      if (req.headers[name] !== this._reqHeaders[name]) return false;\n    }\n\n    return true;\n  }\n\n  _copyWithoutHopByHopHeaders(inHeaders) {\n    const headers = {};\n\n    for (const name in inHeaders) {\n      if (hopByHopHeaders[name]) continue;\n      headers[name] = inHeaders[name];\n    } // 9.1.  Connection\n\n\n    if (inHeaders.connection) {\n      const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n\n      for (const name of tokens) {\n        delete headers[name];\n      }\n    }\n\n    if (headers.warning) {\n      const warnings = headers.warning.split(/,/).filter(warning => {\n        return !/^\\s*1[0-9][0-9]/.test(warning);\n      });\n\n      if (!warnings.length) {\n        delete headers.warning;\n      } else {\n        headers.warning = warnings.join(',').trim();\n      }\n    }\n\n    return headers;\n  }\n\n  responseHeaders() {\n    const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n\n    const age = this.age(); // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n    // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n\n    if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {\n      headers.warning = (headers.warning ? `${headers.warning}, ` : '') + '113 - \"rfc7234 5.5.4\"';\n    }\n\n    headers.age = `${Math.round(age)}`;\n    headers.date = new Date(this.now()).toUTCString();\n    return headers;\n  }\n  /**\n   * Value of the Date response header or current time if Date was invalid\n   * @return timestamp\n   */\n\n\n  date() {\n    const serverDate = Date.parse(this._resHeaders.date);\n\n    if (isFinite(serverDate)) {\n      return serverDate;\n    }\n\n    return this._responseTime;\n  }\n  /**\n   * Value of the Age header, in seconds, updated for the current time.\n   * May be fractional.\n   *\n   * @return Number\n   */\n\n\n  age() {\n    let age = this._ageValue();\n\n    const residentTime = (this.now() - this._responseTime) / 1000;\n    return age + residentTime;\n  }\n\n  _ageValue() {\n    return toNumberOrZero(this._resHeaders.age);\n  }\n  /**\n   * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n   *\n   * For an up-to-date value, see `timeToLive()`.\n   *\n   * @return Number\n   */\n\n\n  maxAge() {\n    if (!this.storable() || this._rescc['no-cache']) {\n      return 0;\n    } // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n    // so this implementation requires explicit opt-in via public header\n\n\n    if (this._isShared && this._resHeaders['set-cookie'] && !this._rescc.public && !this._rescc.immutable) {\n      return 0;\n    }\n\n    if (this._resHeaders.vary === '*') {\n      return 0;\n    }\n\n    if (this._isShared) {\n      if (this._rescc['proxy-revalidate']) {\n        return 0;\n      } // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n\n\n      if (this._rescc['s-maxage']) {\n        return toNumberOrZero(this._rescc['s-maxage']);\n      }\n    } // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n\n\n    if (this._rescc['max-age']) {\n      return toNumberOrZero(this._rescc['max-age']);\n    }\n\n    const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n    const serverDate = this.date();\n\n    if (this._resHeaders.expires) {\n      const expires = Date.parse(this._resHeaders.expires); // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n\n      if (Number.isNaN(expires) || expires < serverDate) {\n        return 0;\n      }\n\n      return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n    }\n\n    if (this._resHeaders['last-modified']) {\n      const lastModified = Date.parse(this._resHeaders['last-modified']);\n\n      if (isFinite(lastModified) && serverDate > lastModified) {\n        return Math.max(defaultMinTtl, (serverDate - lastModified) / 1000 * this._cacheHeuristic);\n      }\n    }\n\n    return defaultMinTtl;\n  }\n\n  timeToLive() {\n    const age = this.maxAge() - this.age();\n    const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n    const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n    return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n  }\n\n  stale() {\n    return this.maxAge() <= this.age();\n  }\n\n  _useStaleIfError() {\n    return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n  }\n\n  useStaleWhileRevalidate() {\n    return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n  }\n\n  static fromObject(obj) {\n    return new this(undefined, undefined, {\n      _fromObject: obj\n    });\n  }\n\n  _fromObject(obj) {\n    if (this._responseTime) throw Error('Reinitialized');\n    if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n    this._responseTime = obj.t;\n    this._isShared = obj.sh;\n    this._cacheHeuristic = obj.ch;\n    this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n    this._status = obj.st;\n    this._resHeaders = obj.resh;\n    this._rescc = obj.rescc;\n    this._method = obj.m;\n    this._url = obj.u;\n    this._host = obj.h;\n    this._noAuthorization = obj.a;\n    this._reqHeaders = obj.reqh;\n    this._reqcc = obj.reqcc;\n  }\n\n  toObject() {\n    return {\n      v: 1,\n      t: this._responseTime,\n      sh: this._isShared,\n      ch: this._cacheHeuristic,\n      imm: this._immutableMinTtl,\n      st: this._status,\n      resh: this._resHeaders,\n      rescc: this._rescc,\n      m: this._method,\n      u: this._url,\n      h: this._host,\n      a: this._noAuthorization,\n      reqh: this._reqHeaders,\n      reqcc: this._reqcc\n    };\n  }\n  /**\n   * Headers for sending to the origin server to revalidate stale response.\n   * Allows server to return 304 to allow reuse of the previous response.\n   *\n   * Hop by hop headers are always stripped.\n   * Revalidation headers may be added or removed, depending on request.\n   */\n\n\n  revalidationHeaders(incomingReq) {\n    this._assertRequestHasHeaders(incomingReq);\n\n    const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers); // This implementation does not understand range requests\n\n\n    delete headers['if-range'];\n\n    if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n      // revalidation allowed via HEAD\n      // not for the same resource, or wasn't allowed to be cached anyway\n      delete headers['if-none-match'];\n      delete headers['if-modified-since'];\n      return headers;\n    }\n    /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n\n\n    if (this._resHeaders.etag) {\n      headers['if-none-match'] = headers['if-none-match'] ? `${headers['if-none-match']}, ${this._resHeaders.etag}` : this._resHeaders.etag;\n    } // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n\n\n    const forbidsWeakValidators = headers['accept-ranges'] || headers['if-match'] || headers['if-unmodified-since'] || this._method && this._method != 'GET';\n    /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n    Note: This implementation does not understand partial responses (206) */\n\n    if (forbidsWeakValidators) {\n      delete headers['if-modified-since'];\n\n      if (headers['if-none-match']) {\n        const etags = headers['if-none-match'].split(/,/).filter(etag => {\n          return !/^\\s*W\\//.test(etag);\n        });\n\n        if (!etags.length) {\n          delete headers['if-none-match'];\n        } else {\n          headers['if-none-match'] = etags.join(',').trim();\n        }\n      }\n    } else if (this._resHeaders['last-modified'] && !headers['if-modified-since']) {\n      headers['if-modified-since'] = this._resHeaders['last-modified'];\n    }\n\n    return headers;\n  }\n  /**\n   * Creates new CachePolicy with information combined from the previews response,\n   * and the new revalidation response.\n   *\n   * Returns {policy, modified} where modified is a boolean indicating\n   * whether the response body has been modified, and old cached body can't be used.\n   *\n   * @return {Object} {policy: CachePolicy, modified: Boolean}\n   */\n\n\n  revalidatedPolicy(request, response) {\n    this._assertRequestHasHeaders(request);\n\n    if (this._useStaleIfError() && isErrorResponse(response)) {\n      // I consider the revalidation request unsuccessful\n      return {\n        modified: false,\n        matches: false,\n        policy: this\n      };\n    }\n\n    if (!response || !response.headers) {\n      throw Error('Response headers missing');\n    } // These aren't going to be supported exactly, since one CachePolicy object\n    // doesn't know about all the other cached objects.\n\n\n    let matches = false;\n\n    if (response.status !== undefined && response.status != 304) {\n      matches = false;\n    } else if (response.headers.etag && !/^\\s*W\\//.test(response.headers.etag)) {\n      // \"All of the stored responses with the same strong validator are selected.\n      // If none of the stored responses contain the same strong validator,\n      // then the cache MUST NOT use the new response to update any stored responses.\"\n      matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag;\n    } else if (this._resHeaders.etag && response.headers.etag) {\n      // \"If the new response contains a weak validator and that validator corresponds\n      // to one of the cache's stored responses,\n      // then the most recent of those matching stored responses is selected for update.\"\n      matches = this._resHeaders.etag.replace(/^\\s*W\\//, '') === response.headers.etag.replace(/^\\s*W\\//, '');\n    } else if (this._resHeaders['last-modified']) {\n      matches = this._resHeaders['last-modified'] === response.headers['last-modified'];\n    } else {\n      // If the new response does not include any form of validator (such as in the case where\n      // a client generates an If-Modified-Since request from a source other than the Last-Modified\n      // response header field), and there is only one stored response, and that stored response also\n      // lacks a validator, then that stored response is selected for update.\n      if (!this._resHeaders.etag && !this._resHeaders['last-modified'] && !response.headers.etag && !response.headers['last-modified']) {\n        matches = true;\n      }\n    }\n\n    if (!matches) {\n      return {\n        policy: new this.constructor(request, response),\n        // Client receiving 304 without body, even if it's invalid/mismatched has no option\n        // but to reuse a cached body. We don't have a good way to tell clients to do\n        // error recovery in such case.\n        modified: response.status != 304,\n        matches: false\n      };\n    } // use other header fields provided in the 304 (Not Modified) response to replace all instances\n    // of the corresponding header fields in the stored response.\n\n\n    const headers = {};\n\n    for (const k in this._resHeaders) {\n      headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];\n    }\n\n    const newResponse = Object.assign({}, response, {\n      status: this._status,\n      method: this._method,\n      headers\n    });\n    return {\n      policy: new this.constructor(request, newResponse, {\n        shared: this._isShared,\n        cacheHeuristic: this._cacheHeuristic,\n        immutableMinTimeToLive: this._immutableMinTtl\n      }),\n      modified: false,\n      matches: true\n    };\n  }\n\n};","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/http-cache-semantics/index.js"],"names":["statusCodeCacheableByDefault","Set","understoodStatuses","errorStatusCodes","hopByHopHeaders","date","connection","te","trailer","upgrade","excludedFromRevalidationUpdate","toNumberOrZero","s","n","parseInt","isFinite","isErrorResponse","response","has","status","parseCacheControl","header","cc","parts","trim","split","part","k","v","undefined","replace","formatCacheControl","push","length","join","module","exports","CachePolicy","constructor","req","res","shared","cacheHeuristic","immutableMinTimeToLive","ignoreCargoCult","_fromObject","headers","Error","_assertRequestHasHeaders","_responseTime","now","_isShared","_cacheHeuristic","_immutableMinTtl","_status","_resHeaders","_rescc","_method","method","_url","url","_host","host","_noAuthorization","authorization","_reqHeaders","vary","_reqcc","Object","assign","expires","pragma","test","Date","storable","_hasExplicitExpiration","private","_allowsStoringAuthenticated","public","satisfiesWithoutRevalidation","requestCC","age","timeToLive","stale","allowsStale","maxAge","_requestMatches","allowHeadMethod","_varyMatches","fields","toLowerCase","name","_copyWithoutHopByHopHeaders","inHeaders","tokens","warning","warnings","filter","responseHeaders","Math","round","toUTCString","serverDate","parse","_ageValue","residentTime","immutable","defaultMinTtl","Number","isNaN","max","lastModified","staleIfErrorAge","staleWhileRevalidateAge","_useStaleIfError","useStaleWhileRevalidate","fromObject","obj","t","sh","ch","imm","st","resh","rescc","m","u","h","a","reqh","reqcc","toObject","revalidationHeaders","incomingReq","etag","forbidsWeakValidators","etags","revalidatedPolicy","request","modified","matches","policy","newResponse"],"mappings":"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","sourcesContent":["'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503, \n    504,\n]);\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\n\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if(!response) {\n        return true\n    }\n    return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts) {\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.has(this._status) &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc['max-age'] ||\n                (this._isShared && this._rescc['s-maxage']) ||\n                this._rescc.public ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.has(this._status))\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */\n    date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = this._ageValue();\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return toNumberOrZero(this._rescc['s-maxage']);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return toNumberOrZero(this._rescc['max-age']);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((serverDate - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n    }\n\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if(this._useStaleIfError() && isErrorResponse(response)) {  // I consider the revalidation request unsuccessful\n          return {\n            modified: false,\n            matches: false,\n            policy: this,\n          };\n        }\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}