{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _auth, _logLevel, _logger, _got;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst logging_1 = require(\"./logging\");\n\nconst errors_1 = require(\"./errors\");\n\nconst helpers_1 = require(\"./helpers\");\n\nconst api_endpoints_1 = require(\"./api-endpoints\");\n\nconst got_1 = require(\"got\");\n\nclass Client {\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n\n    _auth.set(this, void 0);\n\n    _logLevel.set(this, void 0);\n\n    _logger.set(this, void 0);\n\n    _got.set(this, void 0);\n    /*\n     * Notion API endpoints\n     */\n\n\n    this.blocks = {\n      children: {\n        /**\n         * Append block children\n         */\n        append: args => {\n          return this.request({\n            path: api_endpoints_1.blocksChildrenAppend.path(args),\n            method: api_endpoints_1.blocksChildrenAppend.method,\n            query: helpers_1.pick(args, api_endpoints_1.blocksChildrenAppend.queryParams),\n            body: helpers_1.pick(args, api_endpoints_1.blocksChildrenAppend.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        },\n\n        /**\n         * Retrieve block children\n         */\n        list: args => {\n          return this.request({\n            path: api_endpoints_1.blocksChildrenList.path(args),\n            method: api_endpoints_1.blocksChildrenList.method,\n            query: helpers_1.pick(args, api_endpoints_1.blocksChildrenList.queryParams),\n            body: helpers_1.pick(args, api_endpoints_1.blocksChildrenList.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.databases = {\n      /**\n       * List databases\n       *\n       * @deprecated Please use `search`\n       */\n      list: (args = {}) => {\n        return this.request({\n          path: api_endpoints_1.databasesList.path(),\n          method: api_endpoints_1.databasesList.method,\n          query: helpers_1.pick(args, api_endpoints_1.databasesList.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.databasesList.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Retrieve a database\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.databasesRetrieve.path(args),\n          method: api_endpoints_1.databasesRetrieve.method,\n          query: helpers_1.pick(args, api_endpoints_1.databasesRetrieve.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.databasesRetrieve.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Query a database\n       */\n      query: args => {\n        return this.request({\n          path: api_endpoints_1.databasesQuery.path(args),\n          method: api_endpoints_1.databasesQuery.method,\n          query: helpers_1.pick(args, api_endpoints_1.databasesQuery.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.databasesQuery.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.pages = {\n      /**\n       * Create a page\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.pagesCreate.path(),\n          method: api_endpoints_1.pagesCreate.method,\n          query: helpers_1.pick(args, api_endpoints_1.pagesCreate.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.pagesCreate.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Retrieve a page\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.pagesRetrieve.path(args),\n          method: api_endpoints_1.pagesRetrieve.method,\n          query: helpers_1.pick(args, api_endpoints_1.pagesRetrieve.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.pagesRetrieve.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Update page properties\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.pagesUpdate.path(args),\n          method: api_endpoints_1.pagesUpdate.method,\n          query: helpers_1.pick(args, api_endpoints_1.pagesUpdate.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.pagesUpdate.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.users = {\n      /**\n       * Retrieve a user\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.usersRetrieve.path(args),\n          method: api_endpoints_1.usersRetrieve.method,\n          query: helpers_1.pick(args, api_endpoints_1.usersRetrieve.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.usersRetrieve.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * List all users\n       */\n      list: (args = {}) => {\n        return this.request({\n          path: api_endpoints_1.usersList.path(),\n          method: api_endpoints_1.usersList.method,\n          query: helpers_1.pick(args, api_endpoints_1.usersList.queryParams),\n          body: helpers_1.pick(args, api_endpoints_1.usersList.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n\n    __classPrivateFieldSet(this, _auth, options === null || options === void 0 ? void 0 : options.auth);\n\n    __classPrivateFieldSet(this, _logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN);\n\n    __classPrivateFieldSet(this, _logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : logging_1.makeConsoleLogger(this.constructor.name));\n\n    const prefixUrl = ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\";\n    const timeout = (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000;\n    const notionVersion = (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion;\n\n    __classPrivateFieldSet(this, _got, got_1.default.extend({\n      prefixUrl,\n      timeout,\n      headers: {\n        \"Notion-Version\": notionVersion,\n        // TODO: update with format appropriate for telemetry, use version from package.json\n        \"user-agent\": \"notionhq-client/0.1.0\"\n      },\n      retry: 0,\n      agent: makeAgentOption(prefixUrl, options === null || options === void 0 ? void 0 : options.agent)\n    }));\n  }\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n\n\n  async request({\n    path,\n    method,\n    query,\n    body,\n    auth\n  }) {\n    this.log(logging_1.LogLevel.INFO, \"request start\", {\n      method,\n      path\n    }); // If the body is empty, don't send the body in the HTTP request\n\n    const json = body !== undefined && Object.entries(body).length === 0 ? undefined : body;\n\n    try {\n      const response = await __classPrivateFieldGet(this, _got).call(this, path, {\n        method,\n        searchParams: query,\n        json,\n        headers: this.authAsHeaders(auth)\n      }).json();\n      this.log(logging_1.LogLevel.INFO, `request success`, {\n        method,\n        path\n      });\n      return response;\n    } catch (error) {\n      // Build an error of a known type, otherwise throw unexpected errors\n      const requestError = errors_1.buildRequestError(error);\n\n      if (requestError === undefined) {\n        throw error;\n      }\n\n      this.log(logging_1.LogLevel.WARN, `request fail`, {\n        code: requestError.code,\n        message: requestError.message\n      });\n\n      if (errors_1.HTTPResponseError.isHTTPResponseError(requestError)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n          body: requestError.body\n        });\n      } // Throw as a known error type\n\n\n      throw requestError;\n    }\n  }\n  /**\n   * Search\n   */\n\n\n  search(args) {\n    return this.request({\n      path: api_endpoints_1.search.path(),\n      method: api_endpoints_1.search.method,\n      query: helpers_1.pick(args, api_endpoints_1.search.queryParams),\n      body: helpers_1.pick(args, api_endpoints_1.search.bodyParams),\n      auth: args === null || args === void 0 ? void 0 : args.auth\n    });\n  }\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n\n\n  log(level, message, extraInfo) {\n    if (logging_1.logLevelSeverity(level) >= logging_1.logLevelSeverity(__classPrivateFieldGet(this, _logLevel))) {\n      __classPrivateFieldGet(this, _logger).call(this, level, message, extraInfo);\n    }\n  }\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n\n\n  authAsHeaders(auth) {\n    const headers = {};\n    const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _auth);\n\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n    }\n\n    return headers;\n  }\n\n}\n\nexports.default = Client;\n_auth = new WeakMap(), _logLevel = new WeakMap(), _logger = new WeakMap(), _got = new WeakMap();\nClient.defaultNotionVersion = \"2021-05-13\";\n/*\n * Helper functions\n */\n\nfunction makeAgentOption(prefixUrl, agent) {\n  if (agent === undefined) {\n    return undefined;\n  }\n\n  return {\n    [selectProtocol(prefixUrl)]: agent\n  };\n}\n\nfunction selectProtocol(prefixUrl) {\n  const url = new url_1.URL(prefixUrl);\n\n  if (url.protocol === \"https:\") {\n    return \"https\";\n  } else if (url.protocol === \"http:\") {\n    return \"http\";\n  }\n\n  throw new TypeError(`baseUrl option must begin with \"https://\" or \"http://\"`);\n}","map":{"version":3,"sources":["../../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Agent } from \"http\"\nimport { URL } from \"url\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport { buildRequestError, HTTPResponseError } from \"./errors\"\nimport { pick } from \"./helpers\"\nimport {\n  BlocksChildrenAppendParameters,\n  BlocksChildrenAppendResponse,\n  blocksChildrenAppend,\n  BlocksChildrenListParameters,\n  BlocksChildrenListResponse,\n  blocksChildrenList,\n  DatabasesListParameters,\n  DatabasesListResponse,\n  databasesList,\n  DatabasesQueryResponse,\n  DatabasesQueryParameters,\n  databasesQuery,\n  DatabasesRetrieveParameters,\n  DatabasesRetrieveResponse,\n  databasesRetrieve,\n  PagesCreateParameters,\n  PagesCreateResponse,\n  pagesCreate,\n  PagesRetrieveParameters,\n  PagesRetrieveResponse,\n  pagesRetrieve,\n  PagesUpdateParameters,\n  PagesUpdateResponse,\n  pagesUpdate,\n  UsersListParameters,\n  UsersListResponse,\n  usersList,\n  UsersRetrieveParameters,\n  UsersRetrieveResponse,\n  usersRetrieve,\n  SearchParameters,\n  SearchResponse,\n  search,\n} from \"./api-endpoints\"\n\nimport got, {\n  Got,\n  Options as GotOptions,\n  Headers as GotHeaders,\n  Agents as GotAgents,\n} from \"got\"\n\nexport interface ClientOptions {\n  auth?: string\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  agent?: Agent\n  notionVersion?: string\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport default class Client {\n  #auth?: string\n  #logLevel: LogLevel\n  #logger: Logger\n  #got: Got\n\n  static readonly defaultNotionVersion = \"2021-05-13\"\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN\n    this.#logger = options?.logger ?? makeConsoleLogger(this.constructor.name)\n\n    const prefixUrl = (options?.baseUrl ?? \"https://api.notion.com\") + \"/v1/\"\n    const timeout = options?.timeoutMs ?? 60_000\n    const notionVersion = options?.notionVersion ?? Client.defaultNotionVersion\n\n    this.#got = got.extend({\n      prefixUrl,\n      timeout,\n      headers: {\n        \"Notion-Version\": notionVersion,\n        // TODO: update with format appropriate for telemetry, use version from package.json\n        \"user-agent\": \"notionhq-client/0.1.0\",\n      },\n      retry: 0,\n      agent: makeAgentOption(prefixUrl, options?.agent),\n    })\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<Response>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<Response> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const json =\n      body !== undefined && Object.entries(body).length === 0 ? undefined : body\n\n    try {\n      const response = await this.#got(path, {\n        method,\n        searchParams: query,\n        json,\n        headers: this.authAsHeaders(auth),\n      }).json<Response>()\n\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return response\n    } catch (error) {\n      // Build an error of a known type, otherwise throw unexpected errors\n      const requestError = buildRequestError(error)\n      if (requestError === undefined) {\n        throw error\n      }\n\n      this.log(LogLevel.WARN, `request fail`, {\n        code: requestError.code,\n        message: requestError.message,\n      })\n      if (HTTPResponseError.isHTTPResponseError(requestError)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: requestError.body,\n        })\n      }\n\n      // Throw as a known error type\n      throw requestError\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    children: {\n      /**\n       * Append block children\n       */\n      append: (\n        args: WithAuth<BlocksChildrenAppendParameters>\n      ): Promise<BlocksChildrenAppendResponse> => {\n        return this.request<BlocksChildrenAppendResponse>({\n          path: blocksChildrenAppend.path(args),\n          method: blocksChildrenAppend.method,\n          query: pick(args, blocksChildrenAppend.queryParams),\n          body: pick(args, blocksChildrenAppend.bodyParams),\n          auth: args?.auth,\n        })\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (\n        args: WithAuth<BlocksChildrenListParameters>\n      ): Promise<BlocksChildrenListResponse> => {\n        return this.request<BlocksChildrenListResponse>({\n          path: blocksChildrenList.path(args),\n          method: blocksChildrenList.method,\n          query: pick(args, blocksChildrenList.queryParams),\n          body: pick(args, blocksChildrenList.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     *\n     * @deprecated Please use `search`\n     */\n    list: (\n      args: WithAuth<DatabasesListParameters> = {}\n    ): Promise<DatabasesListResponse> => {\n      return this.request<DatabasesListResponse>({\n        path: databasesList.path(),\n        method: databasesList.method,\n        query: pick(args, databasesList.queryParams),\n        body: pick(args, databasesList.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (\n      args: WithAuth<DatabasesRetrieveParameters>\n    ): Promise<DatabasesRetrieveResponse> => {\n      return this.request<DatabasesRetrieveResponse>({\n        path: databasesRetrieve.path(args),\n        method: databasesRetrieve.method,\n        query: pick(args, databasesRetrieve.queryParams),\n        body: pick(args, databasesRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Query a database\n     */\n    query: (\n      args: WithAuth<DatabasesQueryParameters>\n    ): Promise<DatabasesQueryResponse> => {\n      return this.request<DatabasesQueryResponse>({\n        path: databasesQuery.path(args),\n        method: databasesQuery.method,\n        query: pick(args, databasesQuery.queryParams),\n        body: pick(args, databasesQuery.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (\n      args: WithAuth<PagesCreateParameters>\n    ): Promise<PagesCreateResponse> => {\n      return this.request<PagesCreateResponse>({\n        path: pagesCreate.path(),\n        method: pagesCreate.method,\n        query: pick(args, pagesCreate.queryParams),\n        body: pick(args, pagesCreate.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (\n      args: WithAuth<PagesRetrieveParameters>\n    ): Promise<PagesRetrieveResponse> => {\n      return this.request<PagesRetrieveResponse>({\n        path: pagesRetrieve.path(args),\n        method: pagesRetrieve.method,\n        query: pick(args, pagesRetrieve.queryParams),\n        body: pick(args, pagesRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (\n      args: WithAuth<PagesUpdateParameters>\n    ): Promise<PagesUpdateResponse> => {\n      return this.request<PagesUpdateResponse>({\n        path: pagesUpdate.path(args),\n        method: pagesUpdate.method,\n        query: pick(args, pagesUpdate.queryParams),\n        body: pick(args, pagesUpdate.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (\n      args: WithAuth<UsersRetrieveParameters>\n    ): Promise<UsersRetrieveResponse> => {\n      return this.request<UsersRetrieveResponse>({\n        path: usersRetrieve.path(args),\n        method: usersRetrieve.method,\n        query: pick(args, usersRetrieve.queryParams),\n        body: pick(args, usersRetrieve.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List all users\n     */\n    list: (\n      args: WithAuth<UsersListParameters> = {}\n    ): Promise<UsersListResponse> => {\n      return this.request<UsersListResponse>({\n        path: usersList.path(),\n        method: usersList.method,\n        query: pick(args, usersList.queryParams),\n        body: pick(args, usersList.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  /**\n   * Search\n   */\n  public search(args: WithAuth<SearchParameters>): Promise<SearchResponse> {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    })\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): GotHeaders {\n    const headers: GotHeaders = {}\n    const authHeaderValue = auth ?? this.#auth\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    }\n    return headers\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\"\ntype QueryParams = GotOptions[\"searchParams\"]\n\ntype WithAuth<P> = P & { auth?: string }\n\n/*\n * Helper functions\n */\n\nfunction makeAgentOption(\n  prefixUrl: string,\n  agent: Agent | undefined\n): GotAgents | undefined {\n  if (agent === undefined) {\n    return undefined\n  }\n  return {\n    [selectProtocol(prefixUrl)]: agent,\n  }\n}\n\nfunction selectProtocol(prefixUrl: string): \"http\" | \"https\" {\n  const url = new URL(prefixUrl)\n\n  if (url.protocol === \"https:\") {\n    return \"https\"\n  } else if (url.protocol === \"http:\") {\n    return \"http\"\n  }\n\n  throw new TypeError(`baseUrl option must begin with \"https://\" or \"http://\"`)\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}