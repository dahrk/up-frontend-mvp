{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\n\nexports.default = () => {\n  const handlers = [];\n  return {\n    once(origin, event, fn) {\n      origin.once(event, fn);\n      handlers.push({\n        origin,\n        event,\n        fn\n      });\n    },\n\n    unhandleAll() {\n      for (const handler of handlers) {\n        const {\n          origin,\n          event,\n          fn\n        } = handler;\n        origin.removeListener(event, fn);\n      }\n\n      handlers.length = 0;\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/got/dist/source/core/utils/unhandle.js"],"names":["Object","defineProperty","exports","value","default","handlers","once","origin","event","fn","push","unhandleAll","handler","removeListener","length"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CACA;AACA;AACA;AACA;;AACAD,OAAO,CAACE,OAAR,GAAkB,MAAM;AACpB,QAAMC,QAAQ,GAAG,EAAjB;AACA,SAAO;AACHC,IAAAA,IAAI,CAACC,MAAD,EAASC,KAAT,EAAgBC,EAAhB,EAAoB;AACpBF,MAAAA,MAAM,CAACD,IAAP,CAAYE,KAAZ,EAAmBC,EAAnB;AACAJ,MAAAA,QAAQ,CAACK,IAAT,CAAc;AAAEH,QAAAA,MAAF;AAAUC,QAAAA,KAAV;AAAiBC,QAAAA;AAAjB,OAAd;AACH,KAJE;;AAKHE,IAAAA,WAAW,GAAG;AACV,WAAK,MAAMC,OAAX,IAAsBP,QAAtB,EAAgC;AAC5B,cAAM;AAAEE,UAAAA,MAAF;AAAUC,UAAAA,KAAV;AAAiBC,UAAAA;AAAjB,YAAwBG,OAA9B;AACAL,QAAAA,MAAM,CAACM,cAAP,CAAsBL,KAAtB,EAA6BC,EAA7B;AACH;;AACDJ,MAAAA,QAAQ,CAACS,MAAT,GAAkB,CAAlB;AACH;;AAXE,GAAP;AAaH,CAfD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// When attaching listeners, it's very easy to forget about them.\n// Especially if you do error handling and set timeouts.\n// So instead of checking if it's proper to throw an error on every timeout ever,\n// use this simple tool which will remove all listeners you have attached.\nexports.default = () => {\n    const handlers = [];\n    return {\n        once(origin, event, fn) {\n            origin.once(event, fn);\n            handlers.push({ origin, event, fn });\n        },\n        unhandleAll() {\n            for (const handler of handlers) {\n                const { origin, event, fn } = handler;\n                origin.removeListener(event, fn);\n            }\n            handlers.length = 0;\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"script"}