{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildRequestError = exports.APIResponseError = exports.APIErrorCode = exports.HTTPResponseError = exports.RequestTimeoutError = void 0;\n\nconst helpers_1 = require(\"./helpers\");\n\nclass RequestTimeoutError extends Error {\n  constructor(message = \"Request to Notion API has timed out\") {\n    super(message);\n    this.code = \"notionhq_client_request_timeout\";\n    this.name = \"RequestTimeoutError\";\n  }\n\n  static isRequestTimeoutError(error) {\n    return error instanceof Error && error.name === \"RequestTimeoutError\" && \"code\" in error && error[\"code\"] === RequestTimeoutError.prototype.code;\n  }\n\n}\n\nexports.RequestTimeoutError = RequestTimeoutError;\n\nclass HTTPResponseError extends Error {\n  constructor(response, message) {\n    super(message !== null && message !== void 0 ? message : `Request to Notion API failed with status: ${response.statusCode}`);\n    this.code = \"notionhq_client_response_error\";\n    this.name = \"HTTPResponseError\";\n    this.status = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.rawBody.toString();\n  }\n\n  static isHTTPResponseError(error) {\n    return error instanceof Error && error.name === \"HTTPResponseError\" && \"code\" in error && error[\"code\"] === HTTPResponseError.prototype.code;\n  }\n\n}\n\nexports.HTTPResponseError = HTTPResponseError;\n/**\n * Error codes for responses from the API.\n */\n\nvar APIErrorCode;\n\n(function (APIErrorCode) {\n  APIErrorCode[\"Unauthorized\"] = \"unauthorized\";\n  APIErrorCode[\"RestrictedResource\"] = \"restricted_resource\";\n  APIErrorCode[\"ObjectNotFound\"] = \"object_not_found\";\n  APIErrorCode[\"RateLimited\"] = \"rate_limited\";\n  APIErrorCode[\"InvalidJSON\"] = \"invalid_json\";\n  APIErrorCode[\"InvalidRequestURL\"] = \"invalid_request_url\";\n  APIErrorCode[\"InvalidRequest\"] = \"invalid_request\";\n  APIErrorCode[\"ValidationError\"] = \"validation_error\";\n  APIErrorCode[\"ConflictError\"] = \"conflict_error\";\n  APIErrorCode[\"InternalServerError\"] = \"internal_server_error\";\n  APIErrorCode[\"ServiceUnavailable\"] = \"service_unavailable\";\n})(APIErrorCode = exports.APIErrorCode || (exports.APIErrorCode = {}));\n/**\n * A response from the API indicating a problem.\n *\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */\n\n\nclass APIResponseError extends HTTPResponseError {\n  constructor(response, body) {\n    super(response, body.message);\n    this.name = \"APIResponseError\";\n    this.code = body.code;\n  }\n\n  static isAPIResponseError(error) {\n    return error instanceof Error && error.name === \"APIResponseError\" && \"code\" in error && isAPIErrorCode(error[\"code\"]);\n  }\n\n}\n\nexports.APIResponseError = APIResponseError;\n\nfunction buildRequestError(error) {\n  if (isGotTimeoutError(error)) {\n    return new RequestTimeoutError();\n  }\n\n  if (isGotHTTPError(error)) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(error.response.body);\n\n    if (apiErrorResponseBody !== undefined) {\n      return new APIResponseError(error.response, apiErrorResponseBody);\n    }\n\n    return new HTTPResponseError(error.response);\n  }\n\n  return;\n}\n\nexports.buildRequestError = buildRequestError;\n\nfunction parseAPIErrorResponseBody(body) {\n  if (typeof body !== \"string\") {\n    return;\n  }\n\n  let parsed;\n\n  try {\n    parsed = JSON.parse(body);\n  } catch (parseError) {\n    return;\n  }\n\n  if (!helpers_1.isObject(parsed) || typeof parsed[\"message\"] !== \"string\" || !isAPIErrorCode(parsed[\"code\"])) {\n    return;\n  }\n\n  return { ...parsed,\n    code: parsed[\"code\"],\n    message: parsed[\"message\"]\n  };\n}\n/*\n * Type guards\n */\n\n\nfunction isAPIErrorCode(code) {\n  return typeof code === \"string\" && Object.values(APIErrorCode).includes(code);\n}\n\nfunction isGotTimeoutError(error) {\n  return error instanceof Error && error.name === \"TimeoutError\" && \"event\" in error && typeof error[\"event\"] === \"string\" && helpers_1.isObject(error[\"request\"]) && helpers_1.isObject(error[\"timings\"]);\n}\n\nfunction isGotHTTPError(error) {\n  return error instanceof Error && error.name === \"HTTPError\" && \"request\" in error && helpers_1.isObject(error[\"request\"]) && \"response\" in error && helpers_1.isObject(error[\"response\"]) && \"timings\" in error && helpers_1.isObject(error[\"timings\"]);\n}","map":{"version":3,"sources":["../../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IncomingHttpHeaders } from \"http\"\nimport type {\n  HTTPError as GotHTTPError,\n  TimeoutError as GotTimeoutError,\n  Response as GotResponse,\n} from \"got\"\nimport { isObject } from \"./helpers\"\n\nexport class RequestTimeoutError extends Error {\n  readonly code = \"notionhq_client_request_timeout\"\n\n  constructor(message = \"Request to Notion API has timed out\") {\n    super(message)\n    this.name = \"RequestTimeoutError\"\n  }\n\n  static isRequestTimeoutError(error: unknown): error is RequestTimeoutError {\n    return (\n      error instanceof Error &&\n      error.name === \"RequestTimeoutError\" &&\n      \"code\" in error &&\n      error[\"code\"] === RequestTimeoutError.prototype.code\n    )\n  }\n}\n\nexport class HTTPResponseError extends Error {\n  readonly code: string = \"notionhq_client_response_error\"\n  readonly status: number\n  readonly headers: IncomingHttpHeaders\n  readonly body: string\n\n  constructor(response: GotResponse, message?: string) {\n    super(\n      message ??\n        `Request to Notion API failed with status: ${response.statusCode}`\n    )\n    this.name = \"HTTPResponseError\"\n    this.status = response.statusCode\n    this.headers = response.headers\n    this.body = response.rawBody.toString()\n  }\n\n  static isHTTPResponseError(error: unknown): error is HTTPResponseError {\n    return (\n      error instanceof Error &&\n      error.name === \"HTTPResponseError\" &&\n      \"code\" in error &&\n      error[\"code\"] === HTTPResponseError.prototype.code\n    )\n  }\n}\n\n/**\n * Error codes for responses from the API.\n */\nexport enum APIErrorCode {\n  Unauthorized = \"unauthorized\",\n  RestrictedResource = \"restricted_resource\",\n  ObjectNotFound = \"object_not_found\",\n  RateLimited = \"rate_limited\",\n  InvalidJSON = \"invalid_json\",\n  InvalidRequestURL = \"invalid_request_url\",\n  InvalidRequest = \"invalid_request\",\n  ValidationError = \"validation_error\",\n  ConflictError = \"conflict_error\",\n  InternalServerError = \"internal_server_error\",\n  ServiceUnavailable = \"service_unavailable\",\n}\n\n/**\n * Body of an error response from the API.\n */\ninterface APIErrorResponseBody {\n  code: APIErrorCode\n  message: string\n}\n\n/**\n * A response from the API indicating a problem.\n *\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */\nexport class APIResponseError\n  extends HTTPResponseError\n  implements APIErrorResponseBody\n{\n  readonly code: APIErrorCode\n\n  constructor(response: GotResponse, body: APIErrorResponseBody) {\n    super(response, body.message)\n    this.name = \"APIResponseError\"\n    this.code = body.code\n  }\n\n  static isAPIResponseError(error: unknown): error is APIResponseError {\n    return (\n      error instanceof Error &&\n      error.name === \"APIResponseError\" &&\n      \"code\" in error &&\n      isAPIErrorCode(error[\"code\"])\n    )\n  }\n}\n\ntype RequestError = RequestTimeoutError | HTTPResponseError\n\nexport function buildRequestError(error: unknown): RequestError | undefined {\n  if (isGotTimeoutError(error)) {\n    return new RequestTimeoutError()\n  }\n  if (isGotHTTPError(error)) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(error.response.body)\n    if (apiErrorResponseBody !== undefined) {\n      return new APIResponseError(error.response, apiErrorResponseBody)\n    }\n    return new HTTPResponseError(error.response)\n  }\n  return\n}\n\nfunction parseAPIErrorResponseBody(\n  body: unknown\n): APIErrorResponseBody | undefined {\n  if (typeof body !== \"string\") {\n    return\n  }\n\n  let parsed\n  try {\n    parsed = JSON.parse(body)\n  } catch (parseError) {\n    return\n  }\n\n  if (\n    !isObject(parsed) ||\n    typeof parsed[\"message\"] !== \"string\" ||\n    !isAPIErrorCode(parsed[\"code\"])\n  ) {\n    return\n  }\n\n  return {\n    ...parsed,\n    code: parsed[\"code\"],\n    message: parsed[\"message\"],\n  }\n}\n\n/*\n * Type guards\n */\n\nfunction isAPIErrorCode(code: unknown): code is APIErrorCode {\n  return (\n    typeof code === \"string\" &&\n    Object.values<string>(APIErrorCode).includes(code)\n  )\n}\n\nfunction isGotTimeoutError(error: unknown): error is GotTimeoutError {\n  return (\n    error instanceof Error &&\n    error.name === \"TimeoutError\" &&\n    \"event\" in error &&\n    typeof error[\"event\"] === \"string\" &&\n    isObject(error[\"request\"]) &&\n    isObject(error[\"timings\"])\n  )\n}\n\nfunction isGotHTTPError(error: unknown): error is GotHTTPError {\n  return (\n    error instanceof Error &&\n    error.name === \"HTTPError\" &&\n    \"request\" in error &&\n    isObject(error[\"request\"]) &&\n    \"response\" in error &&\n    isObject(error[\"response\"]) &&\n    \"timings\" in error &&\n    isObject(error[\"timings\"])\n  )\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}