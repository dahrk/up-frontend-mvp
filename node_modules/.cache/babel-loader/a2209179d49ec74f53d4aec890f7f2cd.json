{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\n\nmodule.exports = (options = {}) => new Promise((resolve, reject) => {\n  let timeout = false;\n\n  const callback = async () => {\n    socket.off('timeout', onTimeout);\n    socket.off('error', reject);\n\n    if (options.resolveSocket) {\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        socket,\n        timeout\n      });\n\n      if (timeout) {\n        await Promise.resolve();\n        socket.emit('timeout');\n      }\n    } else {\n      socket.destroy();\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        timeout\n      });\n    }\n  };\n\n  const onTimeout = async () => {\n    timeout = true;\n    callback();\n  };\n\n  const socket = tls.connect(options, callback);\n  socket.on('error', reject);\n  socket.once('timeout', onTimeout);\n});","map":{"version":3,"sources":["/home/td/code/up-frontend-mvp/node_modules/resolve-alpn/index.js"],"names":["tls","require","module","exports","options","Promise","resolve","reject","timeout","callback","socket","off","onTimeout","resolveSocket","alpnProtocol","emit","destroy","connect","on","once"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAO,GAAG,EAAX,KAAkB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnE,MAAIC,OAAO,GAAG,KAAd;;AAEA,QAAMC,QAAQ,GAAG,YAAY;AAC5BC,IAAAA,MAAM,CAACC,GAAP,CAAW,SAAX,EAAsBC,SAAtB;AACAF,IAAAA,MAAM,CAACC,GAAP,CAAW,OAAX,EAAoBJ,MAApB;;AAEA,QAAIH,OAAO,CAACS,aAAZ,EAA2B;AAC1BP,MAAAA,OAAO,CAAC;AAACQ,QAAAA,YAAY,EAAEJ,MAAM,CAACI,YAAtB;AAAoCJ,QAAAA,MAApC;AAA4CF,QAAAA;AAA5C,OAAD,CAAP;;AAEA,UAAIA,OAAJ,EAAa;AACZ,cAAMH,OAAO,CAACC,OAAR,EAAN;AACAI,QAAAA,MAAM,CAACK,IAAP,CAAY,SAAZ;AACA;AACD,KAPD,MAOO;AACNL,MAAAA,MAAM,CAACM,OAAP;AACAV,MAAAA,OAAO,CAAC;AAACQ,QAAAA,YAAY,EAAEJ,MAAM,CAACI,YAAtB;AAAoCN,QAAAA;AAApC,OAAD,CAAP;AACA;AACD,GAfD;;AAiBA,QAAMI,SAAS,GAAG,YAAY;AAC7BJ,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,QAAQ;AACR,GAHD;;AAKA,QAAMC,MAAM,GAAGV,GAAG,CAACiB,OAAJ,CAAYb,OAAZ,EAAqBK,QAArB,CAAf;AAEAC,EAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAmBX,MAAnB;AACAG,EAAAA,MAAM,CAACS,IAAP,CAAY,SAAZ,EAAuBP,SAAvB;AACA,CA7BkC,CAAnC","sourcesContent":["'use strict';\nconst tls = require('tls');\n\nmodule.exports = (options = {}) => new Promise((resolve, reject) => {\n\tlet timeout = false;\n\n\tconst callback = async () => {\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('error', reject);\n\n\t\tif (options.resolveSocket) {\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, socket, timeout});\n\n\t\t\tif (timeout) {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tsocket.emit('timeout');\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.destroy();\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, timeout});\n\t\t}\n\t};\n\n\tconst onTimeout = async () => {\n\t\ttimeout = true;\n\t\tcallback();\n\t};\n\n\tconst socket = tls.connect(options, callback);\n\n\tsocket.on('error', reject);\n\tsocket.once('timeout', onTimeout);\n});\n"]},"metadata":{},"sourceType":"script"}